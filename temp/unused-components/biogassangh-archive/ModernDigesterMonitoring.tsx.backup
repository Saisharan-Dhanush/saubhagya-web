import React, { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';
import { Badge } from '../../components/ui/badge';
import { Button } from '../../components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';
import { Progress } from '../../components/ui/progress';
import {
  Activity,
  Thermometer,
  Gauge,
  AlertTriangle,
  CheckCircle,
  RefreshCw,
  TrendingUp,
  TrendingDown,
  Zap,
  Droplets,
  Wind,
  Beaker,
  Settings,
  Wifi,
  WifiOff,
  Radio,
  Cpu,
  Monitor,
  Play,
  Pause
} from 'lucide-react';
import {
  LineChart, Line, AreaChart, Area,
  XAxis, YAxis, CartesianGrid, ResponsiveContainer, Legend, Tooltip
} from 'recharts';

// Type definitions
interface DigesterData {
  id: string;
  name: string;
  status: string;
  temperature: number;
  pressure: number;
  methaneLevel: number;
  dailyProduction: number;
  efficiency: number;
  lastUpdated: string;
  detailedSensors: {
    ph: number;
    humidity: number;
    co2Level: number;
    h2sLevel: number;
    gasFlow: number;
    liquidLevel: number;
    stirringSpeed: number;
    powerConsumption: number;
  };
  trends: {
    methane: number;
    production: number;
    temperature: number;
    pressure: number;
  };
}

// Base digester configurations
const baseDigesters: DigesterData[] = [
  {
    id: 'D001',
    name: 'Digester Alpha-1',
    status: 'active',
    temperature: 35.5,
    pressure: 1.2,
    methaneLevel: 65,
    dailyProduction: 150.5,
    efficiency: 85,
    lastUpdated: new Date().toISOString(),
    detailedSensors: {
      ph: 7.2,
      humidity: 82,
      co2Level: 28,
      h2sLevel: 0.15,
      gasFlow: 45.2,
      liquidLevel: 78,
      stirringSpeed: 120,
      powerConsumption: 2.4
    },
    trends: { methane: 2, production: 5, temperature: 1, pressure: 0.5 }
  },
  {
    id: 'D002',
    name: 'Digester Alpha-2',
    status: 'active',
    temperature: 37.2,
    pressure: 1.5,
    methaneLevel: 68,
    dailyProduction: 175.0,
    efficiency: 88,
    lastUpdated: new Date().toISOString(),
    detailedSensors: {
      ph: 7.5,
      humidity: 85,
      co2Level: 25,
      h2sLevel: 0.12,
      gasFlow: 52.8,
      liquidLevel: 82,
      stirringSpeed: 115,
      powerConsumption: 2.6
    },
    trends: { methane: 1, production: 3, temperature: 0.5, pressure: 0.2 }
  },
  {
    id: 'D003',
    name: 'Digester Alpha-3',
    status: 'maintenance',
    temperature: 32.1,
    pressure: 0.8,
    methaneLevel: 58,
    dailyProduction: 120.0,
    efficiency: 78,
    lastUpdated: new Date().toISOString(),
    detailedSensors: {
      ph: 6.8,
      humidity: 75,
      co2Level: 35,
      h2sLevel: 0.22,
      gasFlow: 32.1,
      liquidLevel: 65,
      stirringSpeed: 0,
      powerConsumption: 0.8
    },
    trends: { methane: -1, production: -2, temperature: -0.5, pressure: -0.1 }
  }
];

// Real-time data simulation hook
const useRealTimeDigesterData = () => {
  const [digesters, setDigesters] = useState<DigesterData[]>(baseDigesters);
  const [isConnected, setIsConnected] = useState(true);
  const [isRealTimeActive, setIsRealTimeActive] = useState(true);
  const [lastUpdateTime, setLastUpdateTime] = useState(new Date());

  const generateSensorVariation = useCallback((baseValue: number, variation: number, min?: number, max?: number) => {
    const change = (Math.random() - 0.5) * variation;
    const newValue = baseValue + change;
    if (min !== undefined && max !== undefined) {
      return Math.max(min, Math.min(max, newValue));
    }
    return newValue;
  }, []);

  const updateDigesterData = useCallback(() => {
    if (!isRealTimeActive) return;

    setDigesters(prevDigesters =>
      prevDigesters.map(digester => {
        if (digester.status === 'maintenance') {
          return { ...digester, lastUpdated: new Date().toISOString() };
        }

        const updatedDigester: DigesterData = {
          ...digester,
          temperature: Math.round(generateSensorVariation(digester.temperature, 0.5, 30, 42) * 10) / 10,
          pressure: Math.round(generateSensorVariation(digester.pressure, 0.1, 0.5, 2.0) * 10) / 10,
          methaneLevel: Math.round(generateSensorVariation(digester.methaneLevel, 2, 50, 80)),
          efficiency: Math.round(generateSensorVariation(digester.efficiency, 1, 70, 95)),
          detailedSensors: {
            ph: Math.round(generateSensorVariation(digester.detailedSensors.ph, 0.1, 6.0, 8.5) * 10) / 10,
            humidity: Math.round(generateSensorVariation(digester.detailedSensors.humidity, 2, 70, 95)),
            co2Level: Math.round(generateSensorVariation(digester.detailedSensors.co2Level, 1, 20, 40)),
            h2sLevel: Math.round(generateSensorVariation(digester.detailedSensors.h2sLevel, 0.02, 0.05, 0.3) * 100) / 100,
            gasFlow: Math.round(generateSensorVariation(digester.detailedSensors.gasFlow, 2, 30, 70) * 10) / 10,
            liquidLevel: Math.round(generateSensorVariation(digester.detailedSensors.liquidLevel, 1, 60, 90)),
            stirringSpeed: digester.status === 'active' ? Math.round(generateSensorVariation(digester.detailedSensors.stirringSpeed, 5, 100, 140)) : 0,
            powerConsumption: Math.round(generateSensorVariation(digester.detailedSensors.powerConsumption, 0.1, 1.5, 3.5) * 10) / 10
          },
          lastUpdated: new Date().toISOString()
        };
        return updatedDigester;
      })
    );
    setLastUpdateTime(new Date());
  }, [generateSensorVariation, isRealTimeActive]);

  useEffect(() => {
    const interval = setInterval(() => {
      if (Math.random() < 0.05) {
        setIsConnected(false);
        setTimeout(() => setIsConnected(true), 2000);
        return;
      }
      updateDigesterData();
    }, 3000);

    return () => clearInterval(interval);
  }, [updateDigesterData]);

  const toggleRealTime = () => setIsRealTimeActive(!isRealTimeActive);
  const refreshData = useCallback(() => updateDigesterData(), [updateDigesterData]);

  return {
    digesters,
    refreshData,
    isLoading: false,
    isConnected,
    isRealTimeActive,
    toggleRealTime,
    lastUpdateTime
  };
};

// Modern Sensor Card with glassmorphism and advanced animations
const ModernSensorCard: React.FC<{
  title: string;
  value: string | number;
  unit?: string;
  icon: React.ReactNode;
  trend?: number;
  color: string;
  status?: 'normal' | 'warning' | 'critical';
  isUpdating?: boolean;
}> = ({ title, value, unit = '', icon, trend, color, status = 'normal', isUpdating = false }) => {
  const getStatusStyles = () => {
    switch (status) {
      case 'warning': return 'bg-gradient-to-br from-amber-50/80 to-orange-50/80 border-amber-200/50 shadow-amber-500/10';
      case 'critical': return 'bg-gradient-to-br from-red-50/80 to-pink-50/80 border-red-200/50 shadow-red-500/10';
      default: return 'bg-gradient-to-br from-white/80 to-gray-50/80 border-gray-200/30 shadow-blue-500/5';
    }
  };

  const getIconColor = () => {
    const colorMap: { [key: string]: string } = {
      orange: 'text-orange-500',
      blue: 'text-blue-500',
      yellow: 'text-yellow-500',
      green: 'text-green-500',
      purple: 'text-purple-500',
      cyan: 'text-cyan-500',
      gray: 'text-gray-500',
      red: 'text-red-500',
      teal: 'text-teal-500',
      indigo: 'text-indigo-500'
    };
    return colorMap[color] || 'text-gray-500';
  };

  return (
    <Card className={`
      group relative overflow-hidden backdrop-blur-xl border transition-all duration-500 hover:scale-[1.02] hover:shadow-2xl
      ${getStatusStyles()}
      ${isUpdating ? 'ring-2 ring-blue-400/50 shadow-blue-500/20' : 'shadow-lg'}
    `}>
      <div className="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />

      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-3">
        <CardTitle className="text-sm font-semibold text-gray-600 group-hover:text-gray-800 transition-colors">
          {title}
        </CardTitle>
        <div className="relative">
          <div className={`
            h-12 w-12 rounded-2xl flex items-center justify-center transition-all duration-300
            bg-gradient-to-br from-white/60 to-gray-100/40 backdrop-blur-sm border border-white/50
            group-hover:scale-110 group-hover:shadow-lg
            ${isUpdating ? 'animate-pulse' : ''}
          `}>
            <div className={`${getIconColor()} transform transition-transform group-hover:scale-110`}>
              {icon}
            </div>
          </div>
          {isUpdating && (
            <div className="absolute -top-1 -right-1 w-4 h-4 bg-blue-500 rounded-full flex items-center justify-center">
              <Radio className="w-2 h-2 text-white animate-pulse" />
            </div>
          )}
        </div>
      </CardHeader>

      <CardContent className="space-y-3">
        <div className="flex items-center justify-between">
          <div className={`
            text-3xl font-bold tracking-tight transition-all duration-500
            bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent
            ${isUpdating ? 'scale-105 from-blue-600 to-blue-800' : ''}
          `}>
            {value}{unit}
          </div>
          {trend !== undefined && (
            <div className={`
              flex items-center justify-center w-8 h-8 rounded-full transition-all duration-300
              ${trend > 0 ? 'bg-green-100 text-green-600' : 'bg-red-100 text-red-600'}
            `}>
              {trend > 0 ? <TrendingUp className="w-4 h-4" /> : <TrendingDown className="w-4 h-4" />}
            </div>
          )}
        </div>

        {isUpdating && (
          <div className="w-full bg-gray-200 rounded-full h-1 overflow-hidden">
            <div className="h-full bg-gradient-to-r from-blue-400 to-blue-600 rounded-full animate-pulse" style={{width: '100%'}} />
          </div>
        )}
      </CardContent>
    </Card>
  );
};

// Modern Connection Status with enhanced design
const ModernConnectionStatus: React.FC<{
  isConnected: boolean;
  lastUpdate: Date;
  isRealTimeActive: boolean;
  onToggleRealTime: () => void;
}> = ({ isConnected, lastUpdate, isRealTimeActive, onToggleRealTime }) => {
  return (
    <div className="flex items-center gap-6 p-4 bg-gradient-to-r from-slate-50/80 to-blue-50/80 backdrop-blur-xl rounded-2xl border border-white/50 shadow-lg">
      {/* Connection Status */}
      <div className="flex items-center gap-3">
        {isConnected ? (
          <div className="flex items-center gap-2 text-emerald-600">
            <div className="relative">
              <Wifi className="w-5 h-5" />
              <div className="absolute -top-1 -right-1 w-3 h-3 bg-emerald-500 rounded-full animate-pulse" />
            </div>
            <span className="font-semibold">LIVE</span>
          </div>
        ) : (
          <div className="flex items-center gap-2 text-red-500">
            <WifiOff className="w-5 h-5 animate-pulse" />
            <span className="font-semibold">RECONNECTING</span>
          </div>
        )}
        <div className="h-6 w-px bg-gray-300" />
        <span className="text-sm text-gray-600 font-medium">
          Last: {lastUpdate.toLocaleTimeString()}
        </span>
      </div>

      {/* Real-time Toggle */}
      <div className="flex items-center gap-3">
        <div className="h-6 w-px bg-gray-300" />
        <Button
          onClick={onToggleRealTime}
          variant="outline"
          size="sm"
          className={`
            gap-2 transition-all duration-300 border-2
            ${isRealTimeActive
              ? 'bg-green-50 border-green-200 text-green-700 hover:bg-green-100'
              : 'bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100'
            }
          `}
        >
          {isRealTimeActive ? (
            <>
              <Pause className="w-4 h-4" />
              Pause Updates
            </>
          ) : (
            <>
              <Play className="w-4 h-4" />
              Resume Updates
            </>
          )}
        </Button>
      </div>
    </div>
  );
};

// Modern Chart Component
const ModernChart: React.FC<{
  title: string;
  subtitle: string;
  children: React.ReactNode;
  isLive?: boolean;
}> = ({ title, subtitle, children, isLive = false }) => {
  return (
    <Card className="group relative overflow-hidden bg-gradient-to-br from-white/90 to-gray-50/90 backdrop-blur-xl border-gray-200/50 shadow-xl hover:shadow-2xl transition-all duration-500">
      <div className="absolute inset-0 bg-gradient-to-br from-blue-500/5 to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />

      <CardHeader className="relative z-10">
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="text-xl font-bold text-gray-800 flex items-center gap-3">
              {title}
              {isLive && (
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse" />
                  <span className="text-sm font-semibold text-red-600 uppercase tracking-wide">LIVE</span>
                </div>
              )}
            </CardTitle>
            <CardDescription className="text-gray-600 font-medium">
              {subtitle}
            </CardDescription>
          </div>
          <div className="w-12 h-12 bg-gradient-to-br from-blue-100 to-purple-100 rounded-2xl flex items-center justify-center">
            <Monitor className="w-6 h-6 text-blue-600" />
          </div>
        </div>
      </CardHeader>

      <CardContent className="relative z-10">
        {children}
      </CardContent>
    </Card>
  );
};

// Generate chart data
const getDetailedChartData = (digester: DigesterData) => {
  const hours = Array.from({ length: 24 }, (_, i) => {
    const hour = i;
    const timeLabel = `${hour.toString().padStart(2, '0')}:00`;
    const variation = Math.sin(i * 0.5) * 5;

    return {
      time: timeLabel,
      temperature: Math.round((digester.temperature + variation + Math.random() * 2) * 10) / 10,
      pressure: Math.round((digester.pressure + variation * 0.1 + Math.random() * 0.2) * 10) / 10,
      methane: Math.round(digester.methaneLevel + variation + Math.random() * 3),
      ph: Math.round((digester.detailedSensors.ph + variation * 0.1 + Math.random() * 0.2) * 10) / 10,
      gasFlow: Math.round(digester.detailedSensors.gasFlow + variation + Math.random() * 5),
      efficiency: Math.round(digester.efficiency + variation * 0.5 + Math.random() * 2)
    };
  });

  return hours;
};

// Main Component
const ModernDigesterMonitoring: React.FC = () => {
  const [selectedDigesterId, setSelectedDigesterId] = useState<string>('D001');

  const {
    digesters,
    refreshData,
    isLoading,
    isConnected,
    isRealTimeActive,
    toggleRealTime,
    lastUpdateTime
  } = useRealTimeDigesterData();

  const selectedDigester = digesters.find(d => d.id === selectedDigesterId) || digesters[0];
  const [isUpdating, setIsUpdating] = useState(false);
  const chartData = getDetailedChartData(selectedDigester);

  useEffect(() => {
    if (isConnected && isRealTimeActive) {
      setIsUpdating(true);
      const timer = setTimeout(() => setIsUpdating(false), 1000);
      return () => clearTimeout(timer);
    }
  }, [selectedDigester.lastUpdated, isConnected, isRealTimeActive]);

  const statusColor = selectedDigester.status === 'active'
    ? 'bg-gradient-to-r from-emerald-500 to-green-600 text-white'
    : selectedDigester.status === 'maintenance'
    ? 'bg-gradient-to-r from-amber-500 to-orange-600 text-white'
    : 'bg-gradient-to-r from-red-500 to-pink-600 text-white';

  const statusIcon = selectedDigester.status === 'active' ? CheckCircle : AlertTriangle;
  const StatusIcon = statusIcon;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 space-y-8 p-6">
      {/* Modern Header */}
      <div className="relative overflow-hidden rounded-3xl bg-gradient-to-r from-blue-600 via-purple-600 to-blue-800 p-8 shadow-2xl">
        <div className="absolute inset-0 bg-black/10" />
        <div className="relative z-10 flex items-center justify-between text-white">
          <div>
            <h1 className="text-4xl font-bold mb-2 tracking-tight">
              Real-Time Digester Monitoring
            </h1>
            <p className="text-blue-100 text-lg font-medium">
              Live sensor data • Advanced analytics • Continuous monitoring
            </p>
          </div>
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-3">
              <label className="text-sm font-semibold text-blue-100">Select Digester:</label>
              <Select value={selectedDigesterId} onValueChange={setSelectedDigesterId}>
                <SelectTrigger className="w-52 bg-white/10 backdrop-blur-sm border-white/20 text-white">
                  <SelectValue placeholder="Choose a digester" />
                </SelectTrigger>
                <SelectContent>
                  {digesters.map((digester) => (
                    <SelectItem key={digester.id} value={digester.id}>
                      <div className="flex items-center gap-2">
                        <div className={`w-2 h-2 rounded-full ${
                          digester.status === 'active' ? 'bg-green-500' : 'bg-yellow-500'
                        }`} />
                        {digester.name}
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <Button
              onClick={refreshData}
              disabled={isLoading}
              className="bg-white/10 backdrop-blur-sm border-white/20 text-white hover:bg-white/20 gap-2"
            >
              <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
              Force Refresh
            </Button>
          </div>
        </div>
      </div>

      {/* Digester Header Card */}
      <Card className="relative overflow-hidden bg-gradient-to-br from-white/90 to-gray-50/90 backdrop-blur-xl border-gray-200/50 shadow-xl">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-3xl font-bold text-gray-800 mb-2">
                {selectedDigester.name}
              </CardTitle>
              <CardDescription className="text-lg text-gray-600">
                Last Updated: {new Date(selectedDigester.lastUpdated).toLocaleString()}
              </CardDescription>
            </div>
            <div className="flex items-center gap-4">
              <Badge className={`${statusColor} px-6 py-3 text-lg font-semibold shadow-lg`}>
                <StatusIcon className="w-5 h-5 mr-2" />
                {selectedDigester.status.toUpperCase()}
              </Badge>
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Connection Status */}
      <ModernConnectionStatus
        isConnected={isConnected}
        lastUpdate={lastUpdateTime}
        isRealTimeActive={isRealTimeActive}
        onToggleRealTime={toggleRealTime}
      />

      {/* Primary Sensors */}
      <div>
        <h3 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-3">
          <Cpu className="w-8 h-8 text-blue-600" />
          Primary Sensors • Live Data Stream
        </h3>
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
          <ModernSensorCard
            title="Temperature"
            value={selectedDigester.temperature}
            unit="°C"
            icon={<Thermometer className="w-6 h-6" />}
            trend={selectedDigester.trends?.temperature}
            color="orange"
            status={selectedDigester.temperature > 40 ? 'warning' : 'normal'}
            isUpdating={isUpdating && isConnected && isRealTimeActive}
          />
          <ModernSensorCard
            title="Pressure"
            value={selectedDigester.pressure}
            unit=" kPa"
            icon={<Gauge className="w-6 h-6" />}
            trend={selectedDigester.trends?.pressure}
            color="blue"
            isUpdating={isUpdating && isConnected && isRealTimeActive}
          />
          <ModernSensorCard
            title="Methane Level"
            value={selectedDigester.methaneLevel}
            unit="%"
            icon={<Zap className="w-6 h-6" />}
            trend={selectedDigester.trends?.methane}
            color="yellow"
            status={selectedDigester.methaneLevel < 60 ? 'warning' : 'normal'}
            isUpdating={isUpdating && isConnected && isRealTimeActive}
          />
          <ModernSensorCard
            title="Efficiency"
            value={selectedDigester.efficiency}
            unit="%"
            icon={<Activity className="w-6 h-6" />}
            trend={selectedDigester.trends?.production}
            color="green"
            isUpdating={isUpdating && isConnected && isRealTimeActive}
          />
        </div>
      </div>

      {/* Secondary Sensors */}
      <div>
        <h3 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-3">
          <Radio className="w-8 h-8 text-purple-600" />
          Secondary Sensors • Environmental Feed
        </h3>
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
          <ModernSensorCard
            title="pH Level"
            value={selectedDigester.detailedSensors?.ph}
            icon={<Beaker className="w-6 h-6" />}
            color="purple"
            status={selectedDigester.detailedSensors?.ph! < 6.5 || selectedDigester.detailedSensors?.ph! > 8 ? 'warning' : 'normal'}
            isUpdating={isUpdating && isConnected && isRealTimeActive}
          />
          <ModernSensorCard
            title="Humidity"
            value={selectedDigester.detailedSensors?.humidity}
            unit="%"
            icon={<Droplets className="w-6 h-6" />}
            color="cyan"
            isUpdating={isUpdating && isConnected && isRealTimeActive}
          />
          <ModernSensorCard
            title="CO₂ Level"
            value={selectedDigester.detailedSensors?.co2Level}
            unit="%"
            icon={<Wind className="w-6 h-6" />}
            color="gray"
            isUpdating={isUpdating && isConnected && isRealTimeActive}
          />
          <ModernSensorCard
            title="H₂S Level"
            value={selectedDigester.detailedSensors?.h2sLevel}
            unit=" ppm"
            icon={<AlertTriangle className="w-6 h-6" />}
            color="red"
            status={selectedDigester.detailedSensors?.h2sLevel! > 0.2 ? 'warning' : 'normal'}
            isUpdating={isUpdating && isConnected && isRealTimeActive}
          />
        </div>
      </div>

      {/* Operational Metrics */}
      <div>
        <h3 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-3">
          <Settings className="w-8 h-8 text-indigo-600" />
          Operational Metrics • System Performance
        </h3>
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
          <ModernSensorCard
            title="Gas Flow Rate"
            value={selectedDigester.detailedSensors?.gasFlow}
            unit=" L/min"
            icon={<Wind className="w-6 h-6" />}
            color="blue"
            isUpdating={isUpdating && isConnected && isRealTimeActive}
          />
          <ModernSensorCard
            title="Liquid Level"
            value={selectedDigester.detailedSensors?.liquidLevel}
            unit="%"
            icon={<Gauge className="w-6 h-6" />}
            color="teal"
            status={selectedDigester.detailedSensors?.liquidLevel! < 70 ? 'warning' : 'normal'}
            isUpdating={isUpdating && isConnected && isRealTimeActive}
          />
          <ModernSensorCard
            title="Stirring Speed"
            value={selectedDigester.detailedSensors?.stirringSpeed}
            unit=" RPM"
            icon={<Settings className="w-6 h-6" />}
            color="indigo"
            status={selectedDigester.status === 'maintenance' && selectedDigester.detailedSensors?.stirringSpeed === 0 ? 'warning' : 'normal'}
            isUpdating={isUpdating && isConnected && isRealTimeActive}
          />
          <ModernSensorCard
            title="Power Consumption"
            value={selectedDigester.detailedSensors?.powerConsumption}
            unit=" kW"
            icon={<Zap className="w-6 h-6" />}
            color="yellow"
            isUpdating={isUpdating && isConnected && isRealTimeActive}
          />
        </div>
      </div>

      {/* Modern Charts */}
      <div className="grid gap-8 lg:grid-cols-2">
        <ModernChart
          title="Live Efficiency Analytics"
          subtitle="Real-time efficiency and gas flow correlation"
          isLive={isConnected && isRealTimeActive}
        >
          <ResponsiveContainer width="100%" height={320}>
            <LineChart data={chartData}>
              <defs>
                <linearGradient id="efficiencyGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#10b981" stopOpacity={0.8}/>
                  <stop offset="95%" stopColor="#10b981" stopOpacity={0.1}/>
                </linearGradient>
                <linearGradient id="gasFlowGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#3b82f6" stopOpacity={0.8}/>
                  <stop offset="95%" stopColor="#3b82f6" stopOpacity={0.1}/>
                </linearGradient>
              </defs>
              <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" strokeOpacity={0.3} />
              <XAxis
                dataKey="time"
                stroke="#64748b"
                fontSize={12}
                fontWeight={600}
                tick={{ fill: '#64748b' }}
              />
              <YAxis
                stroke="#64748b"
                fontSize={12}
                fontWeight={600}
                tick={{ fill: '#64748b' }}
              />
              <Tooltip
                contentStyle={{
                  backgroundColor: 'rgba(255, 255, 255, 0.95)',
                  border: 'none',
                  borderRadius: '16px',
                  boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
                  backdropFilter: 'blur(16px)'
                }}
              />
              <Legend />
              <Line
                type="monotone"
                dataKey="efficiency"
                stroke="#10b981"
                strokeWidth={3}
                name="Efficiency (%)"
                dot={{ fill: '#10b981', stroke: '#ffffff', strokeWidth: 2, r: 4 }}
                activeDot={{ r: 6, stroke: '#10b981', strokeWidth: 2, fill: '#ffffff' }}
              />
              <Line
                type="monotone"
                dataKey="gasFlow"
                stroke="#3b82f6"
                strokeWidth={3}
                name="Gas Flow (L/min)"
                dot={{ fill: '#3b82f6', stroke: '#ffffff', strokeWidth: 2, r: 4 }}
                activeDot={{ r: 6, stroke: '#3b82f6', strokeWidth: 2, fill: '#ffffff' }}
              />
            </LineChart>
          </ResponsiveContainer>
        </ModernChart>

        <ModernChart
          title="Environmental Conditions"
          subtitle="Temperature, pressure, and pH monitoring"
          isLive={isConnected && isRealTimeActive}
        >
          <ResponsiveContainer width="100%" height={320}>
            <LineChart data={chartData}>
              <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" strokeOpacity={0.3} />
              <XAxis
                dataKey="time"
                stroke="#64748b"
                fontSize={12}
                fontWeight={600}
                tick={{ fill: '#64748b' }}
              />
              <YAxis
                stroke="#64748b"
                fontSize={12}
                fontWeight={600}
                tick={{ fill: '#64748b' }}
              />
              <Tooltip
                contentStyle={{
                  backgroundColor: 'rgba(255, 255, 255, 0.95)',
                  border: 'none',
                  borderRadius: '16px',
                  boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
                  backdropFilter: 'blur(16px)'
                }}
              />
              <Legend />
              <Line
                type="monotone"
                dataKey="temperature"
                stroke="#f59e0b"
                strokeWidth={3}
                name="Temperature (°C)"
                dot={{ fill: '#f59e0b', stroke: '#ffffff', strokeWidth: 2, r: 4 }}
              />
              <Line
                type="monotone"
                dataKey="pressure"
                stroke="#8b5cf6"
                strokeWidth={3}
                name="Pressure (kPa)"
                dot={{ fill: '#8b5cf6', stroke: '#ffffff', strokeWidth: 2, r: 4 }}
              />
              <Line
                type="monotone"
                dataKey="ph"
                stroke="#ec4899"
                strokeWidth={3}
                name="pH Level"
                dot={{ fill: '#ec4899', stroke: '#ffffff', strokeWidth: 2, r: 4 }}
              />
            </LineChart>
          </ResponsiveContainer>
        </ModernChart>
      </div>

      {/* Live Methane Production Stream */}
      <ModernChart
        title="Live Methane Production Stream"
        subtitle="Real-time methane concentration monitoring with predictive analytics"
        isLive={isConnected && isRealTimeActive}
      >
        <ResponsiveContainer width="100%" height={400}>
          <AreaChart data={chartData}>
            <defs>
              <linearGradient id="methaneGradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="#fbbf24" stopOpacity={0.8}/>
                <stop offset="50%" stopColor="#f59e0b" stopOpacity={0.4}/>
                <stop offset="95%" stopColor="#d97706" stopOpacity={0.1}/>
              </linearGradient>
            </defs>
            <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" strokeOpacity={0.3} />
            <XAxis
              dataKey="time"
              stroke="#64748b"
              fontSize={12}
              fontWeight={600}
              tick={{ fill: '#64748b' }}
            />
            <YAxis
              stroke="#64748b"
              fontSize={12}
              fontWeight={600}
              tick={{ fill: '#64748b' }}
            />
            <Tooltip
              contentStyle={{
                backgroundColor: 'rgba(255, 255, 255, 0.95)',
                border: 'none',
                borderRadius: '16px',
                boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
                backdropFilter: 'blur(16px)'
              }}
            />
            <Legend />
            <Area
              type="monotone"
              dataKey="methane"
              stroke="#fbbf24"
              strokeWidth={4}
              fillOpacity={1}
              fill="url(#methaneGradient)"
              name="Methane Level (%)"
            />
          </AreaChart>
        </ResponsiveContainer>
      </ModernChart>
    </div>
  );
};

export default ModernDigesterMonitoring;