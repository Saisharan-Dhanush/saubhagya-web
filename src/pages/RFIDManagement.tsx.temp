import React, { useState, useEffect } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Wifi, 
  WifiOff, 
  Settings, 
  Activity, 
  MapPin, 
  Signal, 
  Clock, 
  AlertTriangle,
  CheckCircle,
  XCircle,
  RefreshCw,
  Plus,
  Trash2,
  Edit,
  Eye
} from 'lucide-react';

interface RFIDReader {
  id: number;
  readerName: string;
  ipAddress: string;
  port: number;
  readerType: string;
  status: string;
  firmwareVersion?: string;
  model?: string;
  serialNumber?: string;
  clusterId?: string;
  locationName?: string;
  gpsLat?: number;
  gpsLng?: number;
  rfPower?: number;
  antennaCount?: number;
  region?: string;
  readCycleTime?: number;
  isContinuousReading?: boolean;
  isLLRPEnabled?: boolean;
  isMQTTEnabled?: boolean;
  isAPIEnabled?: boolean;
  lastHeartbeat?: string;
  lastReadTime?: string;
  totalTagsRead?: number;
  connectionAttempts?: number;
  isHealthy?: boolean;
  healthScore?: number;
  createdAt: string;
  updatedAt: string;
}

interface RFIDTagReading {
  id: number;
  epc: string;
  readerId: number;
  antennaPort?: number;
  rssi?: number;
  phase?: number;
  frequency?: number;
  readCount?: number;
  readTimestamp: string;
  session?: number;
  target?: number;
  qValue?: number;
  protocol?: string;
  memoryBank?: string;
  memoryData?: string;
  isValid?: boolean;
  locationLat?: number;
  locationLng?: number;
}

// Backend API endpoints
const IOT_API = import.meta.env.VITE_IOT_API || 'http://localhost:8080';

const RFIDManagement: React.FC = () => {
  const { user } = useAuth();
  const [readers, setReaders] = useState<RFIDReader[]>([]);
  const [tagReadings, setTagReadings] = useState<RFIDTagReading[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedReader, setSelectedReader] = useState<RFIDReader | null>(null);
  const [showAddReader, setShowAddReader] = useState(false);
  const [showReaderConfig, setShowReaderConfig] = useState(false);
  const [newReader, setNewReader] = useState<Partial<RFIDReader>>({
    readerName: '',
    ipAddress: '',
    port: 5084,
    readerType: 'ZEBRA_FX9600',
    rfPower: 30,
    antennaCount: 4,
    region: 'IN',
    readCycleTime: 1000,
    isContinuousReading: true,
    isLLRPEnabled: true,
    isMQTTEnabled: false,
    isAPIEnabled: true
  });

  // Fetch readers
  const fetchReaders = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      if (!token) {
        setError('Authentication required');
        return;
      }

      const response = await fetch(`${IOT_API}/api/iot/rfid-readers?gaushalaId=${user?.id}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        setReaders(data.content || data || []);
        setError(null);
      } else {
        console.warn('Failed to fetch RFID readers');
        setReaders([]);
      }
    } catch (err) {
      console.error('Error fetching RFID readers:', err);
      setReaders([]);
    } finally {
      setLoading(false);
    }
  };

  // Fetch recent tag readings
  const fetchRecentReadings = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;

      const response = await fetch(`${IOT_API}/api/iot/rfid-readers/readings/recent?minutes=10&gaushalaId=${user?.id}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        setTagReadings(data || []);
      } else {
        console.warn('Failed to fetch recent readings');
        setTagReadings([]);
      }
    } catch (err) {
      console.error('Error fetching recent readings:', err);
      setTagReadings([]);
    }
  };

  // Create new reader
  const createReader = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      if (!token) {
        setError('Authentication required');
        return;
      }

      const readerData = {
        ...newReader,
        gaushalaId: user?.id,
        clusterId: user?.clusterId || user?.id
      };

      const response = await fetch(`${IOT_API}/api/iot/rfid-readers`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(readerData),
      });

      if (response.ok) {
        setShowAddReader(false);
        setNewReader({
          readerName: '',
          ipAddress: '',
          port: 5084,
          readerType: 'ZEBRA_FX9600',
          rfPower: 30,
          antennaCount: 4,
          region: 'IN',
          readCycleTime: 1000,
          isContinuousReading: true,
          isLLRPEnabled: true,
          isMQTTEnabled: false,
          isAPIEnabled: true
        });
        fetchReaders();
        setError(null);
      } else {
        const errorData = await response.json().catch(() => ({ message: 'Failed to create reader' }));
        setError(errorData.message || 'Failed to create reader');
      }
    } catch (err) {
      console.error('Error creating RFID reader:', err);
      setError('Error creating RFID reader');
    } finally {
      setLoading(false);
    }
  };

  // Test reader connection
  const testConnection = async (reader: RFIDReader) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setError('Authentication required');
        return;
      }

      const response = await fetch(`${IOT_API}/api/iot/rfid-readers/${reader.id}/test-connection`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const result = await response.json();
        if (result.connectionStatus === 'SUCCESS') {
          setError(null);
          fetchReaders();
        } else {
          setError(`Connection test failed: ${result.error || 'Unknown error'}`);
        }
      } else {
        setError('Connection test failed');
      }
    } catch (err) {
      console.error('Error testing connection:', err);
      setError('Error testing connection');
    }
  };

  // Update reader status
  const updateReaderStatus = async (readerId: number, status: string) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;

      const response = await fetch(`${IOT_API}/api/iot/rfid-readers/${readerId}/status?status=${status}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        fetchReaders();
      } else {
        console.warn('Failed to update reader status');
      }
    } catch (err) {
      console.error('Error updating reader status:', err);
    }
  };

  // Delete reader
  const deleteReader = async (readerId: number) => {
    if (window.confirm('Are you sure you want to delete this reader?')) {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          setError('Authentication required');
          return;
        }

        const response = await fetch(`${IOT_API}/api/iot/rfid-readers/${readerId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          fetchReaders();
          setError(null);
        } else {
          setError('Failed to delete reader');
        }
      } catch (err) {
        console.error('Error deleting reader:', err);
        setError('Error deleting reader');
      }
    }
  };

  // Get status badge
  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'ONLINE':
        return <Badge className="bg-green-100 text-green-800"><CheckCircle className="w-3 h-3 mr-1" />Online</Badge>;
      case 'OFFLINE':
        return <Badge className="bg-red-100 text-red-800"><XCircle className="w-3 h-3 mr-1" />Offline</Badge>;
      case 'CONFIGURING':
        return <Badge className="bg-yellow-100 text-yellow-800"><Settings className="w-3 h-3 mr-1" />Configuring</Badge>;
      case 'MAINTENANCE':
        return <Badge className="bg-blue-100 text-blue-800"><Settings className="w-3 h-3 mr-1" />Maintenance</Badge>;
      case 'ERROR':
        return <Badge className="bg-red-100 text-red-800"><AlertTriangle className="w-3 h-3 mr-1" />Error</Badge>;
      default:
        return <Badge className="bg-gray-100 text-gray-800">Unknown</Badge>;
    }
  };

  // Get health badge
  const getHealthBadge = (isHealthy: boolean, healthScore: number) => {
    if (isHealthy && healthScore >= 80) {
      return <Badge className="bg-green-100 text-green-800">Healthy ({healthScore}%)</Badge>;
    } else if (isHealthy && healthScore >= 50) {
      return <Badge className="bg-yellow-100 text-yellow-800">Fair ({healthScore}%)</Badge>;
    } else {
      return <Badge className="bg-red-100 text-red-800">Unhealthy ({healthScore}%)</Badge>;
    }
  };

  useEffect(() => {
    fetchReaders();
    fetchRecentReadings();
    
    // Refresh data every 30 seconds
    const interval = setInterval(() => {
      fetchReaders();
      fetchRecentReadings();
    }, 30000);

    return () => clearInterval(interval);
  }, []);

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">RFID Management</h1>
          <p className="text-gray-600">Manage Zebra FX9600 RFID readers and monitor tag readings</p>
        </div>
        <div className="flex gap-2">
          <Button onClick={fetchReaders} variant="outline" size="sm">
            <RefreshCw className="w-4 h-4 mr-2" />
            Refresh
          </Button>
          <Button onClick={() => setShowAddReader(true)} size="sm">
            <Plus className="w-4 h-4 mr-2" />
            Add Reader
          </Button>
        </div>
      </div>

      {error && (
        <Alert className="border-red-200 bg-red-50">
          <AlertTriangle className="h-4 w-4 text-red-600" />
          <AlertDescription className="text-red-800">{error}</AlertDescription>
        </Alert>
      )}

      <Tabs defaultValue="readers" className="space-y-4">
        <TabsList>
          <TabsTrigger value="readers">RFID Readers</TabsTrigger>
          <TabsTrigger value="readings">Tag Readings</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
        </TabsList>

        <TabsContent value="readers" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>RFID Readers ({readers.length})</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Reader Name</TableHead>
                    <TableHead>IP Address</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Health</TableHead>
                    <TableHead>Location</TableHead>
                    <TableHead>Tags Read</TableHead>
                    <TableHead>Last Seen</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {readers.map((reader) => (
                    <TableRow key={reader.id}>
                      <TableCell className="font-medium">{reader.readerName}</TableCell>
                      <TableCell>{reader.ipAddress}:{reader.port}</TableCell>
                      <TableCell>{reader.readerType}</TableCell>
                      <TableCell>{getStatusBadge(reader.status)}</TableCell>
                      <TableCell>{getHealthBadge(reader.isHealthy || false, reader.healthScore || 0)}</TableCell>
                      <TableCell>
                        {reader.locationName && (
                          <div className="flex items-center text-sm text-gray-600">
                            <MapPin className="w-3 h-3 mr-1" />
                            {reader.locationName}
                          </div>
                        )}
                      </TableCell>
                      <TableCell>{reader.totalTagsRead || 0}</TableCell>
                      <TableCell>
                        {reader.lastHeartbeat && (
                          <div className="flex items-center text-sm text-gray-600">
                            <Clock className="w-3 h-3 mr-1" />
                            {new Date(reader.lastHeartbeat).toLocaleString()}
                          </div>
                        )}
                      </TableCell>
                      <TableCell>
                        <div className="flex gap-1">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => testConnection(reader)}
                          >
                            <Wifi className="w-3 h-3" />
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => {
                              setSelectedReader(reader);
                              setShowReaderConfig(true);
                            }}
                          >
                            <Settings className="w-3 h-3" />
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => deleteReader(reader.id)}
                          >
                            <Trash2 className="w-3 h-3" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="readings" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Recent Tag Readings ({tagReadings.length})</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>EPC</TableHead>
                    <TableHead>Reader</TableHead>
                    <TableHead>Antenna</TableHead>
                    <TableHead>RSSI</TableHead>
                    <TableHead>Protocol</TableHead>
                    <TableHead>Timestamp</TableHead>
                    <TableHead>Valid</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {tagReadings.map((reading) => (
                    <TableRow key={reading.id}>
                      <TableCell className="font-mono text-sm">{reading.epc}</TableCell>
                      <TableCell>Reader {reading.readerId}</TableCell>
                      <TableCell>{reading.antennaPort || 'N/A'}</TableCell>
                      <TableCell>
                        {reading.rssi && (
                          <div className="flex items-center">
                            <Signal className="w-3 h-3 mr-1" />
                            {reading.rssi} dBm
                          </div>
                        )}
                      </TableCell>
                      <TableCell>{reading.protocol || 'EPC Gen2'}</TableCell>
                      <TableCell>
                        <div className="flex items-center text-sm text-gray-600">
                          <Clock className="w-3 h-3 mr-1" />
                          {new Date(reading.readTimestamp).toLocaleString()}
                        </div>
                      </TableCell>
                      <TableCell>
                        {reading.isValid ? (
                          <Badge className="bg-green-100 text-green-800">Valid</Badge>
                        ) : (
                          <Badge className="bg-red-100 text-red-800">Invalid</Badge>
                        )}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="analytics" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Total Readers</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold">{readers.length}</div>
                <p className="text-sm text-gray-600">
                  {readers.filter(r => r.status === 'ONLINE').length} online
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Total Tags Read</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold">
                  {readers.reduce((sum, r) => sum + (r.totalTagsRead || 0), 0)}
                </div>
                <p className="text-sm text-gray-600">All time</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Recent Readings</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold">{tagReadings.length}</div>
                <p className="text-sm text-gray-600">Last 10 minutes</p>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>

      {/* Add Reader Modal */}
      {showAddReader && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-full max-w-md">
            <CardHeader>
              <CardTitle>Add New RFID Reader</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="readerName">Reader Name</Label>
                <Input
                  id="readerName"
                  value={newReader.readerName}
                  onChange={(e) => setNewReader({...newReader, readerName: e.target.value})}
                  placeholder="Enter reader name"
                />
              </div>
              <div>
                <Label htmlFor="ipAddress">IP Address</Label>
                <Input
                  id="ipAddress"
                  value={newReader.ipAddress}
                  onChange={(e) => setNewReader({...newReader, ipAddress: e.target.value})}
                  placeholder="192.168.1.100"
                />
              </div>
              <div>
                <Label htmlFor="port">Port</Label>
                <Input
                  id="port"
                  type="number"
                  value={newReader.port}
                  onChange={(e) => setNewReader({...newReader, port: parseInt(e.target.value)})}
                />
              </div>
              <div>
                <Label htmlFor="readerType">Reader Type</Label>
                <Select
                  value={newReader.readerType}
                  onValueChange={(value) => setNewReader({...newReader, readerType: value})}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="ZEBRA_FX9600">Zebra FX9600</SelectItem>
                    <SelectItem value="ZEBRA_FX7500">Zebra FX7500</SelectItem>
                    <SelectItem value="ZEBRA_FX9500">Zebra FX9500</SelectItem>
                    <SelectItem value="IMPINJ_R700">Impinj R700</SelectItem>
                    <SelectItem value="ALIEN_ALR_9900">Alien ALR-9900</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="rfPower">RF Power (dBm)</Label>
                <Input
                  id="rfPower"
                  type="number"
                  value={newReader.rfPower}
                  onChange={(e) => setNewReader({...newReader, rfPower: parseInt(e.target.value)})}
                />
              </div>
              <div>
                <Label htmlFor="region">Region</Label>
                <Select
                  value={newReader.region}
                  onValueChange={(value) => setNewReader({...newReader, region: value})}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="US">US</SelectItem>
                    <SelectItem value="EU">EU</SelectItem>
                    <SelectItem value="JP">Japan</SelectItem>
                    <SelectItem value="KR">Korea</SelectItem>
                    <SelectItem value="CN">China</SelectItem>
                    <SelectItem value="AU">Australia</SelectItem>
                    <SelectItem value="IN">India</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="flex gap-2">
                <Button onClick={createReader} disabled={loading} className="flex-1">
                  {loading ? 'Creating...' : 'Create Reader'}
                </Button>
                <Button onClick={() => setShowAddReader(false)} variant="outline" className="flex-1">
                  Cancel
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Reader Configuration Modal */}
      {showReaderConfig && selectedReader && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-full max-w-2xl">
            <CardHeader>
              <CardTitle>Configure Reader: {selectedReader.readerName}</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="configRfPower">RF Power (dBm)</Label>
                  <Input
                    id="configRfPower"
                    type="number"
                    defaultValue={selectedReader.rfPower}
                    min="10"
                    max="30"
                  />
                </div>
                <div>
                  <Label htmlFor="configRegion">Region</Label>
                  <Select defaultValue={selectedReader.region}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="US">US</SelectItem>
                      <SelectItem value="EU">EU</SelectItem>
                      <SelectItem value="JP">Japan</SelectItem>
                      <SelectItem value="KR">Korea</SelectItem>
                      <SelectItem value="CN">China</SelectItem>
                      <SelectItem value="AU">Australia</SelectItem>
                      <SelectItem value="IN">India</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="configReadCycle">Read Cycle Time (ms)</Label>
                  <Input
                    id="configReadCycle"
                    type="number"
                    defaultValue={selectedReader.readCycleTime}
                    min="100"
                    max="10000"
                  />
                </div>
                <div>
                  <Label htmlFor="configQValue">Q Value</Label>
                  <Input
                    id="configQValue"
                    type="number"
                    defaultValue="4"
                    min="0"
                    max="15"
                  />
                </div>
              </div>
              <div className="flex gap-2">
                <Button className="flex-1">Save Configuration</Button>
                <Button onClick={() => setShowReaderConfig(false)} variant="outline" className="flex-1">
                  Cancel
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

export default RFIDManagement;
