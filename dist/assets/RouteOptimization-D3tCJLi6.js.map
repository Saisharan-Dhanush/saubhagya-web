{"version":3,"file":"RouteOptimization-D3tCJLi6.js","sources":["../../src/modules/transporter/pages/RouteOptimization/RouteOptimization.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  Route as RouteIcon,\r\n  MapPin,\r\n  Clock,\r\n  Fuel,\r\n  TrendingUp,\r\n  Zap,\r\n  RefreshCw,\r\n  Settings,\r\n  Target,\r\n  Navigation,\r\n  Calculator,\r\n  AlertCircle,\r\n  CheckCircle,\r\n  Loader2\r\n} from 'lucide-react';\r\nimport { transporterService } from '../../services/mockDataService';\r\nimport { Route, OptimizationSettings } from '../../types';\r\n\r\ninterface OptimizationResult {\r\n  originalRoute: Route;\r\n  optimizedRoute: Route;\r\n  improvements: {\r\n    distanceReduction: number;\r\n    timeReduction: number;\r\n    fuelSavings: number;\r\n    costSavings: number;\r\n  };\r\n}\r\n\r\nconst RouteOptimization: React.FC = () => {\r\n  const [routes, setRoutes] = useState<Route[]>([]);\r\n  const [selectedRoute, setSelectedRoute] = useState<Route | null>(null);\r\n  const [optimizing, setOptimizing] = useState(false);\r\n  const [optimizationResult, setOptimizationResult] = useState<OptimizationResult | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n\r\n  const [optimizationSettings, setOptimizationSettings] = useState<OptimizationSettings>({\r\n    prioritizeBy: 'time',\r\n    maxDeliveriesPerRoute: 8,\r\n    maxDistancePerRoute: 100,\r\n    considerTrafficConditions: true,\r\n    considerVehicleCapacity: true,\r\n    considerDriverPreferences: false,\r\n    operatingHours: {\r\n      start: '06:00',\r\n      end: '18:00'\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    const loadRoutes = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await transporterService.getRoutes();\r\n        if (response.success) {\r\n          setRoutes(response.data);\r\n        } else {\r\n          setError('Failed to load routes');\r\n        }\r\n      } catch (err) {\r\n        setError('Failed to load routes');\r\n        console.error('Routes load error:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadRoutes();\r\n  }, []);\r\n\r\n  const handleOptimizeRoute = async (route: Route) => {\r\n    if (!route) return;\r\n\r\n    try {\r\n      setOptimizing(true);\r\n      setSelectedRoute(route);\r\n\r\n      // Create original route snapshot\r\n      const originalRoute = { ...route };\r\n\r\n      // Call optimization service\r\n      const response = await transporterService.optimizeRoute(route.id);\r\n\r\n      if (response.success) {\r\n        const optimizedRoute = response.data;\r\n\r\n        // Calculate improvements\r\n        const improvements = {\r\n          distanceReduction: originalRoute.totalDistance - optimizedRoute.totalDistance,\r\n          timeReduction: originalRoute.estimatedDuration - optimizedRoute.estimatedDuration,\r\n          fuelSavings: originalRoute.fuelCost - optimizedRoute.fuelCost,\r\n          costSavings: (originalRoute.fuelCost + originalRoute.tollCost) -\r\n                      (optimizedRoute.fuelCost + optimizedRoute.tollCost)\r\n        };\r\n\r\n        setOptimizationResult({\r\n          originalRoute,\r\n          optimizedRoute,\r\n          improvements\r\n        });\r\n\r\n        // Update the route in the list\r\n        setRoutes(prev => prev.map(r => r.id === route.id ? optimizedRoute : r));\r\n      }\r\n    } catch (err) {\r\n      console.error('Optimization error:', err);\r\n    } finally {\r\n      setOptimizing(false);\r\n    }\r\n  };\r\n\r\n  const getRouteStatusBadge = (status: Route['status']) => {\r\n    const statusConfig = {\r\n      planned: { color: 'bg-blue-500', label: 'Planned' },\r\n      active: { color: 'bg-green-500', label: 'Active' },\r\n      completed: { color: 'bg-gray-500', label: 'Completed' },\r\n      cancelled: { color: 'bg-red-500', label: 'Cancelled' }\r\n    };\r\n\r\n    const config = statusConfig[status];\r\n    return (\r\n      <Badge className={`${config.color} text-white`}>\r\n        {config.label}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  const getOptimizationScore = (score: number) => {\r\n    if (score >= 90) return { color: 'text-green-600', label: 'Excellent' };\r\n    if (score >= 75) return { color: 'text-blue-600', label: 'Good' };\r\n    if (score >= 60) return { color: 'text-yellow-600', label: 'Average' };\r\n    return { color: 'text-red-600', label: 'Poor' };\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Route Optimization</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Optimize delivery routes for efficiency and cost savings\r\n          </p>\r\n        </div>\r\n        <div className=\"animate-pulse space-y-4\">\r\n          {Array.from({ length: 3 }).map((_, index) => (\r\n            <Card key={index}>\r\n              <CardContent className=\"pt-6\">\r\n                <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\r\n                <div className=\"h-4 bg-gray-300 rounded w-1/2\"></div>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Route Optimization</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Optimize delivery routes for efficiency and cost savings\r\n          </p>\r\n        </div>\r\n        <Card className=\"border-red-200 bg-red-50\">\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"flex items-center space-x-2 text-red-800\">\r\n              <AlertCircle className=\"h-5 w-5\" />\r\n              <span>{error}</span>\r\n            </div>\r\n            <Button\r\n              onClick={() => window.location.reload()}\r\n              className=\"mt-4\"\r\n              variant=\"outline\"\r\n            >\r\n              Retry\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Route Optimization</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Optimize delivery routes for efficiency and cost savings\r\n          </p>\r\n        </div>\r\n        <div className=\"flex space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={() => setShowSettings(!showSettings)}\r\n          >\r\n            <Settings className=\"w-4 h-4 mr-2\" />\r\n            Settings\r\n          </Button>\r\n          <Button className=\"bg-blue-600 hover:bg-blue-700\">\r\n            <Zap className=\"w-4 h-4 mr-2\" />\r\n            Optimize All\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Optimization Settings */}\r\n      {showSettings && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center space-x-2\">\r\n              <Settings className=\"h-5 w-5\" />\r\n              <span>Optimization Settings</span>\r\n            </CardTitle>\r\n            <CardDescription>\r\n              Configure how routes should be optimized\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-2\">Prioritize By</label>\r\n                <select\r\n                  className=\"w-full border border-gray-300 rounded-md px-3 py-2\"\r\n                  value={optimizationSettings.prioritizeBy}\r\n                  onChange={(e) => setOptimizationSettings({\r\n                    ...optimizationSettings,\r\n                    prioritizeBy: e.target.value as any\r\n                  })}\r\n                >\r\n                  <option value=\"time\">Time</option>\r\n                  <option value=\"distance\">Distance</option>\r\n                  <option value=\"fuel_cost\">Fuel Cost</option>\r\n                  <option value=\"customer_priority\">Customer Priority</option>\r\n                </select>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-2\">Max Deliveries per Route</label>\r\n                <input\r\n                  type=\"number\"\r\n                  className=\"w-full border border-gray-300 rounded-md px-3 py-2\"\r\n                  value={optimizationSettings.maxDeliveriesPerRoute}\r\n                  onChange={(e) => setOptimizationSettings({\r\n                    ...optimizationSettings,\r\n                    maxDeliveriesPerRoute: parseInt(e.target.value)\r\n                  })}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-2\">Max Distance (km)</label>\r\n                <input\r\n                  type=\"number\"\r\n                  className=\"w-full border border-gray-300 rounded-md px-3 py-2\"\r\n                  value={optimizationSettings.maxDistancePerRoute}\r\n                  onChange={(e) => setOptimizationSettings({\r\n                    ...optimizationSettings,\r\n                    maxDistancePerRoute: parseInt(e.target.value)\r\n                  })}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"flex items-center space-x-2\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"traffic\"\r\n                  checked={optimizationSettings.considerTrafficConditions}\r\n                  onChange={(e) => setOptimizationSettings({\r\n                    ...optimizationSettings,\r\n                    considerTrafficConditions: e.target.checked\r\n                  })}\r\n                />\r\n                <label htmlFor=\"traffic\" className=\"text-sm font-medium\">\r\n                  Consider Traffic Conditions\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"flex items-center space-x-2\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"capacity\"\r\n                  checked={optimizationSettings.considerVehicleCapacity}\r\n                  onChange={(e) => setOptimizationSettings({\r\n                    ...optimizationSettings,\r\n                    considerVehicleCapacity: e.target.checked\r\n                  })}\r\n                />\r\n                <label htmlFor=\"capacity\" className=\"text-sm font-medium\">\r\n                  Consider Vehicle Capacity\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"flex items-center space-x-2\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"preferences\"\r\n                  checked={optimizationSettings.considerDriverPreferences}\r\n                  onChange={(e) => setOptimizationSettings({\r\n                    ...optimizationSettings,\r\n                    considerDriverPreferences: e.target.checked\r\n                  })}\r\n                />\r\n                <label htmlFor=\"preferences\" className=\"text-sm font-medium\">\r\n                  Consider Driver Preferences\r\n                </label>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"mt-6 flex space-x-2\">\r\n              <Button onClick={() => setShowSettings(false)}>\r\n                Apply Settings\r\n              </Button>\r\n              <Button variant=\"outline\" onClick={() => setShowSettings(false)}>\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Optimization Results */}\r\n      {optimizationResult && (\r\n        <Card className=\"border-green-200 bg-green-50\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center space-x-2 text-green-800\">\r\n              <CheckCircle className=\"h-5 w-5\" />\r\n              <span>Optimization Results</span>\r\n            </CardTitle>\r\n            <CardDescription>\r\n              Route optimization completed for {optimizationResult.originalRoute.name}\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-green-600\">\r\n                  -{optimizationResult.improvements.distanceReduction.toFixed(1)}km\r\n                </div>\r\n                <div className=\"text-sm text-gray-600\">Distance Saved</div>\r\n              </div>\r\n\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-blue-600\">\r\n                  -{optimizationResult.improvements.timeReduction}min\r\n                </div>\r\n                <div className=\"text-sm text-gray-600\">Time Saved</div>\r\n              </div>\r\n\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-purple-600\">\r\n                  ₹{optimizationResult.improvements.fuelSavings.toFixed(0)}\r\n                </div>\r\n                <div className=\"text-sm text-gray-600\">Fuel Savings</div>\r\n              </div>\r\n\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-orange-600\">\r\n                  ₹{optimizationResult.improvements.costSavings.toFixed(0)}\r\n                </div>\r\n                <div className=\"text-sm text-gray-600\">Total Savings</div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"mt-4 flex space-x-2\">\r\n              <Button className=\"bg-green-600 hover:bg-green-700\">\r\n                Apply Optimization\r\n              </Button>\r\n              <Button variant=\"outline\" onClick={() => setOptimizationResult(null)}>\r\n                Dismiss\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Routes List */}\r\n      <div className=\"grid gap-6\">\r\n        {routes.map((route) => {\r\n          const optimizationScore = getOptimizationScore(route.optimizationScore);\r\n\r\n          return (\r\n            <Card key={route.id} className=\"hover:shadow-md transition-shadow\">\r\n              <CardContent className=\"pt-6\">\r\n                <div className=\"flex flex-col lg:flex-row justify-between space-y-4 lg:space-y-0\">\r\n                  {/* Route Info */}\r\n                  <div className=\"flex-1 space-y-4\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <h3 className=\"text-lg font-semibold\">{route.name}</h3>\r\n                        {getRouteStatusBadge(route.status)}\r\n                      </div>\r\n                      <div className=\"text-sm text-gray-500\">\r\n                        Route ID: {route.id}\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Route Metrics */}\r\n                    <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 text-sm\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Navigation className=\"h-4 w-4 text-gray-400\" />\r\n                        <span>{route.totalDistance}km</span>\r\n                      </div>\r\n\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Clock className=\"h-4 w-4 text-gray-400\" />\r\n                        <span>{route.estimatedDuration}min</span>\r\n                      </div>\r\n\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Fuel className=\"h-4 w-4 text-gray-400\" />\r\n                        <span>₹{route.fuelCost}</span>\r\n                      </div>\r\n\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <MapPin className=\"h-4 w-4 text-gray-400\" />\r\n                        <span>{route.waypoints.length} stops</span>\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Start and End Locations */}\r\n                    <div className=\"space-y-2 text-sm\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\r\n                        <span className=\"font-medium\">Start:</span>\r\n                        <span className=\"text-gray-600\">{route.startLocation.address}</span>\r\n                      </div>\r\n\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\r\n                        <span className=\"font-medium\">End:</span>\r\n                        <span className=\"text-gray-600\">{route.endLocation.address}</span>\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Waypoints */}\r\n                    {route.waypoints.length > 0 && (\r\n                      <div className=\"space-y-2\">\r\n                        <h4 className=\"text-sm font-medium\">Delivery Stops:</h4>\r\n                        <div className=\"space-y-1\">\r\n                          {route.waypoints.slice(0, 3).map((waypoint, index) => (\r\n                            <div key={index} className=\"flex items-center space-x-2 text-sm text-gray-600\">\r\n                              <div className=\"w-1.5 h-1.5 bg-blue-400 rounded-full\"></div>\r\n                              <span>{waypoint.address}</span>\r\n                              <span className=\"text-xs text-gray-400\">\r\n                                ({new Date(waypoint.estimatedArrival).toLocaleTimeString([], {\r\n                                  hour: '2-digit',\r\n                                  minute: '2-digit'\r\n                                })})\r\n                              </span>\r\n                            </div>\r\n                          ))}\r\n                          {route.waypoints.length > 3 && (\r\n                            <div className=\"text-sm text-gray-500 ml-4\">\r\n                              +{route.waypoints.length - 3} more stops\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  {/* Optimization Score and Actions */}\r\n                  <div className=\"flex flex-col items-end space-y-4\">\r\n                    <div className=\"text-right\">\r\n                      <div className=\"text-sm text-gray-500\">Optimization Score</div>\r\n                      <div className={`text-2xl font-bold ${optimizationScore.color}`}>\r\n                        {route.optimizationScore}%\r\n                      </div>\r\n                      <div className={`text-sm ${optimizationScore.color}`}>\r\n                        {optimizationScore.label}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"text-right text-sm text-gray-600\">\r\n                      <div>Total Cost: ₹{(route.fuelCost + route.tollCost).toLocaleString()}</div>\r\n                      <div>Toll: ₹{route.tollCost}</div>\r\n                    </div>\r\n\r\n                    <div className=\"flex flex-col space-y-2\">\r\n                      <Button\r\n                        onClick={() => handleOptimizeRoute(route)}\r\n                        disabled={optimizing && selectedRoute?.id === route.id}\r\n                        className=\"bg-blue-600 hover:bg-blue-700\"\r\n                      >\r\n                        {optimizing && selectedRoute?.id === route.id ? (\r\n                          <>\r\n                            <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\r\n                            Optimizing...\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            <Zap className=\"w-4 h-4 mr-2\" />\r\n                            Optimize\r\n                          </>\r\n                        )}\r\n                      </Button>\r\n\r\n                      <Button variant=\"outline\" size=\"sm\">\r\n                        <RouteIcon className=\"w-4 h-4 mr-1\" />\r\n                        View Details\r\n                      </Button>\r\n                    </div>\r\n\r\n                    {/* Assignment Info */}\r\n                    {(route.assignedVehicleId || route.assignedDriverId) && (\r\n                      <div className=\"text-right text-sm space-y-1\">\r\n                        {route.assignedVehicleId && (\r\n                          <div>\r\n                            <span className=\"text-gray-500\">Vehicle: </span>\r\n                            <Badge variant=\"outline\">{route.assignedVehicleId}</Badge>\r\n                          </div>\r\n                        )}\r\n                        {route.assignedDriverId && (\r\n                          <div>\r\n                            <span className=\"text-gray-500\">Driver: </span>\r\n                            <Badge variant=\"outline\">{route.assignedDriverId}</Badge>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          );\r\n        })}\r\n\r\n        {routes.length === 0 && (\r\n          <Card>\r\n            <CardContent className=\"pt-6\">\r\n              <div className=\"text-center py-8\">\r\n                <RouteIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No routes found</h3>\r\n                <p className=\"text-gray-500\">No delivery routes have been created yet.</p>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RouteOptimization;\r\nexport { RouteOptimization };"],"names":["RouteOptimization","routes","setRoutes","useState","selectedRoute","setSelectedRoute","optimizing","setOptimizing","optimizationResult","setOptimizationResult","loading","setLoading","error","setError","showSettings","setShowSettings","optimizationSettings","setOptimizationSettings","useEffect","response","transporterService","handleOptimizeRoute","route","originalRoute","optimizedRoute","improvements","prev","r","getRouteStatusBadge","status","config","jsx","Badge","getOptimizationScore","score","jsxs","_","index","Card","CardContent","AlertCircle","Button","Settings","Zap","CardHeader","CardTitle","CardDescription","e","CheckCircle","optimizationScore","Navigation","Clock","Fuel","MapPin","waypoint","Fragment","Loader2","RouteIcon"],"mappings":"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"}