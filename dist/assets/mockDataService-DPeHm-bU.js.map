{"version":3,"file":"mockDataService-DPeHm-bU.js","sources":["../../src/modules/transporter/services/mockDataService.ts"],"sourcesContent":["/**\r\n * Mock Data Service for Transporter Module\r\n * Provides realistic sample data for development and testing\r\n */\r\n\r\nimport {\r\n  Vehicle,\r\n  Driver,\r\n  DeliverySchedule,\r\n  Route,\r\n  Delivery,\r\n  DashboardStats,\r\n  AlertNotification,\r\n  DeliveryMetrics,\r\n  CustomerFeedback,\r\n  ApiResponse,\r\n  PaginatedResponse\r\n} from '../types';\r\n\r\n// Mock Vehicles Data\r\nexport const mockVehicles: Vehicle[] = [\r\n  {\r\n    id: 'v001',\r\n    registrationNumber: 'MH12AB1234',\r\n    type: 'tanker',\r\n    capacity: 2000,\r\n    status: 'active',\r\n    currentLocation: {\r\n      latitude: 18.5204,\r\n      longitude: 73.8567,\r\n      address: 'Pune, Maharashtra'\r\n    },\r\n    fuelLevel: 75,\r\n    maintenanceDue: '2024-10-15',\r\n    driverId: 'd001',\r\n    assignedRoute: 'r001',\r\n    operatingHours: {\r\n      start: '06:00',\r\n      end: '18:00'\r\n    }\r\n  },\r\n  {\r\n    id: 'v002',\r\n    registrationNumber: 'MH14CD5678',\r\n    type: 'truck',\r\n    capacity: 1500,\r\n    status: 'active',\r\n    currentLocation: {\r\n      latitude: 18.5679,\r\n      longitude: 73.9143,\r\n      address: 'Kharadi, Pune'\r\n    },\r\n    fuelLevel: 45,\r\n    driverId: 'd002',\r\n    assignedRoute: 'r002',\r\n    operatingHours: {\r\n      start: '07:00',\r\n      end: '19:00'\r\n    }\r\n  },\r\n  {\r\n    id: 'v003',\r\n    registrationNumber: 'MH09EF9101',\r\n    type: 'van',\r\n    capacity: 800,\r\n    status: 'maintenance',\r\n    currentLocation: {\r\n      latitude: 18.4088,\r\n      longitude: 73.8878,\r\n      address: 'Service Center, Pune'\r\n    },\r\n    fuelLevel: 20,\r\n    maintenanceDue: '2024-09-25',\r\n    operatingHours: {\r\n      start: '08:00',\r\n      end: '16:00'\r\n    }\r\n  }\r\n];\r\n\r\n// Mock Drivers Data\r\nexport const mockDrivers: Driver[] = [\r\n  {\r\n    id: 'd001',\r\n    name: 'Rajesh Kumar',\r\n    licenseNumber: 'MH0520230001',\r\n    phoneNumber: '+91-9876543210',\r\n    email: 'rajesh.kumar@saubhagya.com',\r\n    status: 'on_delivery',\r\n    currentVehicleId: 'v001',\r\n    rating: 4.8,\r\n    totalDeliveries: 145,\r\n    joinDate: '2023-01-15'\r\n  },\r\n  {\r\n    id: 'd002',\r\n    name: 'Amit Sharma',\r\n    licenseNumber: 'MH0520230002',\r\n    phoneNumber: '+91-9876543211',\r\n    email: 'amit.sharma@saubhagya.com',\r\n    status: 'available',\r\n    currentVehicleId: 'v002',\r\n    rating: 4.6,\r\n    totalDeliveries: 132,\r\n    joinDate: '2023-02-20'\r\n  },\r\n  {\r\n    id: 'd003',\r\n    name: 'Suresh Patil',\r\n    licenseNumber: 'MH0520230003',\r\n    phoneNumber: '+91-9876543212',\r\n    status: 'off_duty',\r\n    rating: 4.9,\r\n    totalDeliveries: 198,\r\n    joinDate: '2022-11-10'\r\n  }\r\n];\r\n\r\n// Mock Delivery Schedules\r\nexport const mockSchedules: DeliverySchedule[] = [\r\n  {\r\n    id: 's001',\r\n    customerName: 'Ram Enterprises',\r\n    customerAddress: '123 Main Street, Hadapsar, Pune - 411028',\r\n    customerPhone: '+91-9876543213',\r\n    deliveryDate: '2024-09-23',\r\n    timeSlot: {\r\n      start: '09:00',\r\n      end: '11:00'\r\n    },\r\n    biogasQuantity: 500,\r\n    priority: 'high',\r\n    status: 'confirmed',\r\n    vehicleId: 'v001',\r\n    driverId: 'd001',\r\n    routeId: 'r001',\r\n    specialInstructions: 'Handle with care - industrial grade biogas',\r\n    estimatedDuration: 45,\r\n    cost: 12500\r\n  },\r\n  {\r\n    id: 's002',\r\n    customerName: 'Green Tech Solutions',\r\n    customerAddress: '456 Tech Park, Magarpatta, Pune - 411013',\r\n    customerPhone: '+91-9876543214',\r\n    deliveryDate: '2024-09-23',\r\n    timeSlot: {\r\n      start: '14:00',\r\n      end: '16:00'\r\n    },\r\n    biogasQuantity: 300,\r\n    priority: 'medium',\r\n    status: 'scheduled',\r\n    estimatedDuration: 30,\r\n    cost: 7500\r\n  },\r\n  {\r\n    id: 's003',\r\n    customerName: 'Eco Home Resort',\r\n    customerAddress: '789 Hill Station Road, Lonavala - 410401',\r\n    customerPhone: '+91-9876543215',\r\n    deliveryDate: '2024-09-24',\r\n    timeSlot: {\r\n      start: '08:00',\r\n      end: '10:00'\r\n    },\r\n    biogasQuantity: 750,\r\n    priority: 'urgent',\r\n    status: 'scheduled',\r\n    specialInstructions: 'Mountain road - use experienced driver',\r\n    estimatedDuration: 90,\r\n    cost: 18750\r\n  }\r\n];\r\n\r\n// Mock Routes\r\nexport const mockRoutes: Route[] = [\r\n  {\r\n    id: 'r001',\r\n    name: 'Pune Industrial Route',\r\n    startLocation: {\r\n      latitude: 18.5204,\r\n      longitude: 73.8567,\r\n      address: 'SAUBHAGYA Biogas Plant, Pune'\r\n    },\r\n    endLocation: {\r\n      latitude: 18.5679,\r\n      longitude: 73.9143,\r\n      address: 'Industrial Area, Pune'\r\n    },\r\n    waypoints: [\r\n      {\r\n        latitude: 18.5400,\r\n        longitude: 73.8800,\r\n        address: '123 Main Street, Hadapsar, Pune',\r\n        deliveryId: 's001',\r\n        estimatedArrival: '2024-09-23T09:30:00Z'\r\n      }\r\n    ],\r\n    totalDistance: 25.5,\r\n    estimatedDuration: 45,\r\n    fuelCost: 850,\r\n    tollCost: 120,\r\n    status: 'active',\r\n    optimizationScore: 85,\r\n    assignedVehicleId: 'v001',\r\n    assignedDriverId: 'd001'\r\n  },\r\n  {\r\n    id: 'r002',\r\n    name: 'Tech Park Circuit',\r\n    startLocation: {\r\n      latitude: 18.5204,\r\n      longitude: 73.8567,\r\n      address: 'SAUBHAGYA Biogas Plant, Pune'\r\n    },\r\n    endLocation: {\r\n      latitude: 18.5170,\r\n      longitude: 73.9300,\r\n      address: 'Magarpatta Tech Park'\r\n    },\r\n    waypoints: [\r\n      {\r\n        latitude: 18.5150,\r\n        longitude: 73.9280,\r\n        address: '456 Tech Park, Magarpatta, Pune',\r\n        deliveryId: 's002',\r\n        estimatedArrival: '2024-09-23T14:15:00Z'\r\n      }\r\n    ],\r\n    totalDistance: 18.2,\r\n    estimatedDuration: 30,\r\n    fuelCost: 650,\r\n    tollCost: 80,\r\n    status: 'planned',\r\n    optimizationScore: 92,\r\n    assignedVehicleId: 'v002',\r\n    assignedDriverId: 'd002'\r\n  }\r\n];\r\n\r\n// Mock Active Deliveries\r\nexport const mockActiveDeliveries: Delivery[] = [\r\n  {\r\n    id: 'del001',\r\n    scheduleId: 's001',\r\n    customerName: 'Ram Enterprises',\r\n    customerAddress: '123 Main Street, Hadapsar, Pune - 411028',\r\n    biogasQuantity: 500,\r\n    status: 'in_transit',\r\n    vehicleId: 'v001',\r\n    driverId: 'd001',\r\n    routeId: 'r001',\r\n    startTime: '2024-09-23T08:30:00Z',\r\n    estimatedArrival: '2024-09-23T09:30:00Z',\r\n    trackingUpdates: [\r\n      {\r\n        timestamp: '2024-09-23T08:30:00Z',\r\n        location: { latitude: 18.5204, longitude: 73.8567 },\r\n        status: 'Departed from biogas plant',\r\n        notes: 'Vehicle loaded with 500kg biogas'\r\n      },\r\n      {\r\n        timestamp: '2024-09-23T08:45:00Z',\r\n        location: { latitude: 18.5300, longitude: 73.8700 },\r\n        status: 'En route to destination',\r\n        notes: 'Traffic conditions normal'\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n// Mock Dashboard Stats\r\nexport const mockDashboardStats: DashboardStats = {\r\n  activeDeliveries: 8,\r\n  completedToday: 12,\r\n  pendingSchedules: 15,\r\n  vehiclesOnRoute: 6,\r\n  averageDeliveryTime: 42,\r\n  onTimeDeliveryRate: 94.5,\r\n  revenueToday: 125000,\r\n  fuelConsumption: 245.8\r\n};\r\n\r\n// Mock Alerts\r\nexport const mockAlerts: AlertNotification[] = [\r\n  {\r\n    id: 'alert001',\r\n    type: 'delivery_delay',\r\n    severity: 'medium',\r\n    title: 'Delivery Running Late',\r\n    message: 'Delivery to Ram Enterprises is 15 minutes behind schedule',\r\n    timestamp: '2024-09-23T09:45:00Z',\r\n    isRead: false,\r\n    actionRequired: true,\r\n    relatedEntityId: 'del001'\r\n  },\r\n  {\r\n    id: 'alert002',\r\n    type: 'vehicle_breakdown',\r\n    severity: 'high',\r\n    title: 'Vehicle Maintenance Required',\r\n    message: 'Vehicle MH09EF9101 requires immediate maintenance',\r\n    timestamp: '2024-09-23T07:30:00Z',\r\n    isRead: true,\r\n    actionRequired: true,\r\n    relatedEntityId: 'v003'\r\n  },\r\n  {\r\n    id: 'alert003',\r\n    type: 'maintenance_due',\r\n    severity: 'low',\r\n    title: 'Scheduled Maintenance Due',\r\n    message: 'Vehicle MH12AB1234 has maintenance due in 3 days',\r\n    timestamp: '2024-09-23T06:00:00Z',\r\n    isRead: false,\r\n    actionRequired: false,\r\n    relatedEntityId: 'v001'\r\n  }\r\n];\r\n\r\n// Mock Delivery Metrics\r\nexport const mockDeliveryMetrics: DeliveryMetrics = {\r\n  totalDeliveries: 1247,\r\n  completedDeliveries: 1198,\r\n  pendingDeliveries: 23,\r\n  failedDeliveries: 26,\r\n  onTimeDeliveryRate: 94.5,\r\n  averageDeliveryTime: 42,\r\n  customerSatisfactionScore: 4.6,\r\n  fuelEfficiency: 8.5,\r\n  revenueGenerated: 2485000,\r\n  operatingCosts: 1680000\r\n};\r\n\r\n// Mock Customer Feedback\r\nexport const mockCustomerFeedback: CustomerFeedback[] = [\r\n  {\r\n    id: 'feedback001',\r\n    deliveryId: 'del001',\r\n    customerId: 'cust001',\r\n    rating: 5,\r\n    comments: 'Excellent service! Driver was very professional and delivery was on time.',\r\n    submittedAt: '2024-09-22T16:30:00Z',\r\n    driverId: 'd001',\r\n    vehicleId: 'v001'\r\n  },\r\n  {\r\n    id: 'feedback002',\r\n    deliveryId: 'del002',\r\n    customerId: 'cust002',\r\n    rating: 4,\r\n    comments: 'Good service overall, but arrived 10 minutes late.',\r\n    submittedAt: '2024-09-22T14:45:00Z',\r\n    driverId: 'd002',\r\n    vehicleId: 'v002'\r\n  }\r\n];\r\n\r\n// Mock API Service Class\r\nexport class TransporterMockService {\r\n  // Simulate API delay\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  // Dashboard APIs\r\n  async getDashboardStats(): Promise<ApiResponse<DashboardStats>> {\r\n    await this.delay(500);\r\n    return {\r\n      success: true,\r\n      data: mockDashboardStats\r\n    };\r\n  }\r\n\r\n  async getAlerts(): Promise<ApiResponse<AlertNotification[]>> {\r\n    await this.delay(300);\r\n    return {\r\n      success: true,\r\n      data: mockAlerts\r\n    };\r\n  }\r\n\r\n  // Vehicle APIs\r\n  async getVehicles(): Promise<ApiResponse<Vehicle[]>> {\r\n    await this.delay(400);\r\n    return {\r\n      success: true,\r\n      data: mockVehicles\r\n    };\r\n  }\r\n\r\n  async getVehicleById(id: string): Promise<ApiResponse<Vehicle | null>> {\r\n    await this.delay(200);\r\n    const vehicle = mockVehicles.find(v => v.id === id);\r\n    return {\r\n      success: true,\r\n      data: vehicle || null\r\n    };\r\n  }\r\n\r\n  // Driver APIs\r\n  async getDrivers(): Promise<ApiResponse<Driver[]>> {\r\n    await this.delay(400);\r\n    return {\r\n      success: true,\r\n      data: mockDrivers\r\n    };\r\n  }\r\n\r\n  // Schedule APIs\r\n  async getSchedules(): Promise<ApiResponse<DeliverySchedule[]>> {\r\n    await this.delay(500);\r\n    return {\r\n      success: true,\r\n      data: mockSchedules\r\n    };\r\n  }\r\n\r\n  async getSchedulesPaginated(page: number = 1, limit: number = 10): Promise<ApiResponse<PaginatedResponse<DeliverySchedule>>> {\r\n    await this.delay(500);\r\n    const startIndex = (page - 1) * limit;\r\n    const endIndex = startIndex + limit;\r\n    const data = mockSchedules.slice(startIndex, endIndex);\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        data,\r\n        total: mockSchedules.length,\r\n        page,\r\n        limit,\r\n        totalPages: Math.ceil(mockSchedules.length / limit)\r\n      }\r\n    };\r\n  }\r\n\r\n  // Route APIs\r\n  async getRoutes(): Promise<ApiResponse<Route[]>> {\r\n    await this.delay(400);\r\n    return {\r\n      success: true,\r\n      data: mockRoutes\r\n    };\r\n  }\r\n\r\n  async optimizeRoute(routeId: string): Promise<ApiResponse<Route>> {\r\n    await this.delay(2000); // Simulate optimization processing\r\n    const route = mockRoutes.find(r => r.id === routeId);\r\n    if (route) {\r\n      // Simulate optimization improvement\r\n      route.optimizationScore = Math.min(100, route.optimizationScore + 5);\r\n      route.totalDistance = route.totalDistance * 0.95; // 5% improvement\r\n      route.estimatedDuration = Math.floor(route.estimatedDuration * 0.95);\r\n    }\r\n    return {\r\n      success: true,\r\n      data: route!,\r\n      message: 'Route optimized successfully'\r\n    };\r\n  }\r\n\r\n  // Delivery APIs\r\n  async getActiveDeliveries(): Promise<ApiResponse<Delivery[]>> {\r\n    await this.delay(400);\r\n    return {\r\n      success: true,\r\n      data: mockActiveDeliveries\r\n    };\r\n  }\r\n\r\n  async getDeliveryHistory(): Promise<ApiResponse<Delivery[]>> {\r\n    await this.delay(500);\r\n    // Return completed deliveries (mock)\r\n    const completedDeliveries = mockActiveDeliveries.map(d => ({\r\n      ...d,\r\n      status: 'delivered' as const,\r\n      actualArrival: '2024-09-22T10:15:00Z',\r\n      deliveryConfirmation: {\r\n        confirmedAt: '2024-09-22T10:15:00Z',\r\n        confirmedBy: 'Customer Signature',\r\n        notes: 'Delivered successfully'\r\n      }\r\n    }));\r\n\r\n    return {\r\n      success: true,\r\n      data: completedDeliveries\r\n    };\r\n  }\r\n\r\n  async confirmDelivery(deliveryId: string, confirmationData: any): Promise<ApiResponse<Delivery>> {\r\n    await this.delay(300);\r\n    const delivery = mockActiveDeliveries.find(d => d.id === deliveryId);\r\n    if (delivery) {\r\n      delivery.status = 'delivered';\r\n      delivery.actualArrival = new Date().toISOString();\r\n      delivery.deliveryConfirmation = {\r\n        confirmedAt: new Date().toISOString(),\r\n        confirmedBy: confirmationData.confirmedBy || 'Driver',\r\n        notes: confirmationData.notes || 'Delivered successfully',\r\n        customerSignature: confirmationData.signature,\r\n        photo: confirmationData.photo\r\n      };\r\n    }\r\n    return {\r\n      success: true,\r\n      data: delivery!,\r\n      message: 'Delivery confirmed successfully'\r\n    };\r\n  }\r\n\r\n  // Metrics APIs\r\n  async getDeliveryMetrics(): Promise<ApiResponse<DeliveryMetrics>> {\r\n    await this.delay(600);\r\n    return {\r\n      success: true,\r\n      data: mockDeliveryMetrics\r\n    };\r\n  }\r\n\r\n  // Feedback APIs\r\n  async getCustomerFeedback(): Promise<ApiResponse<CustomerFeedback[]>> {\r\n    await this.delay(400);\r\n    return {\r\n      success: true,\r\n      data: mockCustomerFeedback\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const transporterService = new TransporterMockService();"],"names":["mockVehicles","mockDrivers","mockSchedules","mockRoutes","mockActiveDeliveries","mockDashboardStats","mockAlerts","mockDeliveryMetrics","mockCustomerFeedback","TransporterMockService","ms","resolve","id","v","page","limit","startIndex","endIndex","routeId","route","r","d","deliveryId","confirmationData","delivery","transporterService"],"mappings":"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"}