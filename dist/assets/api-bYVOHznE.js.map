{"version":3,"file":"api-bYVOHznE.js","sources":["../../src/services/api.ts"],"sourcesContent":["/**\r\n * Unified API Service for SAUBHAGYA Web Admin\r\n * Connects to all 6 microservices with JWT authentication\r\n */\r\n\r\nimport { microservicesClient } from './microservices';\r\n\r\n// API Configuration\r\nconst API_CONFIG = {\r\n  timeout: 15000,\r\n  retries: 3,\r\n  retryDelay: 1000,\r\n};\r\n\r\n// Authentication Management\r\nclass AuthManager {\r\n  private token: string | null = null;\r\n\r\n  setToken(token: string | null) {\r\n    this.token = token;\r\n    if (token) {\r\n      localStorage.setItem('saubhagya_jwt_token', token);\r\n    } else {\r\n      localStorage.removeItem('saubhagya_jwt_token');\r\n    }\r\n  }\r\n\r\n  getToken(): string | null {\r\n    if (!this.token) {\r\n      this.token = localStorage.getItem('saubhagya_jwt_token');\r\n    }\r\n    return this.token;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n\r\n  clear() {\r\n    this.token = null;\r\n    localStorage.removeItem('saubhagya_jwt_token');\r\n  }\r\n}\r\n\r\nexport const authManager = new AuthManager();\r\n\r\n// API Response Types\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  data?: T;\r\n  message?: string;\r\n  error?: string;\r\n}\r\n\r\n// Data Types\r\nexport interface User {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  role: string;\r\n  permissions: string[];\r\n}\r\n\r\nexport interface Cattle {\r\n  id: string;\r\n  rfidTag: string;\r\n  name: string;\r\n  breed: string;\r\n  age: number;\r\n  weight: number;\r\n  health: 'healthy' | 'sick' | 'recovering' | 'vaccination_due';\r\n  ownerId: string;\r\n  ownerName: string;\r\n  location: {\r\n    latitude: number;\r\n    longitude: number;\r\n    timestamp: number;\r\n    address?: string;\r\n  };\r\n  totalDungCollected: number;\r\n  lastDungCollection?: number;\r\n  isActive: boolean;\r\n  photoUrl?: string;\r\n  createdAt: number;\r\n  updatedAt: number;\r\n}\r\n\r\nexport interface Transaction {\r\n  id: string;\r\n  type: 'dung_collection' | 'biogas_sale' | 'payment';\r\n  cattleId?: string;\r\n  amount: number;\r\n  weight?: number;\r\n  timestamp: number;\r\n  status: 'pending' | 'completed' | 'cancelled';\r\n  description: string;\r\n}\r\n\r\nexport interface DashboardStats {\r\n  totalCattle: number;\r\n  activeCattle: number;\r\n  totalTransactions: number;\r\n  totalRevenue: number;\r\n  biogasProduced: number;\r\n  dungCollected: number;\r\n}\r\n\r\n// Core API Service\r\nclass ApiService {\r\n  // Authentication APIs (Auth Service - Port 8081)\r\n  async login(phone: string, password: string): Promise<ApiResponse<{ user: User; token: string }>> {\r\n    try {\r\n      // Direct login to auth service - send phone as-is\r\n      const loginResponse = await fetch('http://localhost:8081/auth-service/api/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          phone,\r\n          password\r\n        }),\r\n      });\r\n\r\n      if (!loginResponse.ok) {\r\n        const errorData = await loginResponse.json();\r\n        throw new Error(errorData.message || 'Login failed');\r\n      }\r\n\r\n      const responseData = await loginResponse.json();\r\n\r\n      // Extract user and token from response\r\n      // Response structure: { accessToken, refreshToken, userProfile: { id, phone, name, email, roles, permissions } }\r\n      const userProfile = responseData.userProfile || responseData.data || {};\r\n      const user: User = {\r\n        id: userProfile.id || userProfile.externalId || '1',\r\n        email: userProfile.email || `${phone}@saubhagya.com`,\r\n        name: userProfile.name || 'User',\r\n        role: userProfile.roles?.[0] || 'user',\r\n        permissions: userProfile.permissions || []\r\n      };\r\n\r\n      const jwtToken = responseData.accessToken || responseData.data?.token || responseData.token;\r\n\r\n      // Store token\r\n      authManager.setToken(jwtToken);\r\n\r\n      return {\r\n        success: true,\r\n        data: { user, token: jwtToken },\r\n        message: 'Login successful'\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Login failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  async logout(): Promise<ApiResponse<null>> {\r\n    authManager.clear();\r\n    return { success: true, data: null, message: 'Logged out successfully' };\r\n  }\r\n\r\n  async getCurrentUser(): Promise<ApiResponse<User>> {\r\n    if (!authManager.isAuthenticated()) {\r\n      return { success: false, error: 'Not authenticated' };\r\n    }\r\n\r\n    // Mock user data - in real implementation, decode JWT or call user endpoint\r\n    return {\r\n      success: true,\r\n      data: {\r\n        id: '1',\r\n        email: 'admin@saubhagya.com',\r\n        name: 'Admin User',\r\n        role: 'admin',\r\n        permissions: ['cattle:read', 'cattle:write', 'transactions:read', 'dashboard:read']\r\n      }\r\n    };\r\n  }\r\n\r\n  // Cattle Management APIs (via Auth Service Gateway)\r\n  async getCattle(): Promise<ApiResponse<Cattle[]>> {\r\n    try {\r\n      const response = await microservicesClient.callService('auth-service', '/auth/api/v1/cattle/list');\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch cattle');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Failed to fetch cattle'\r\n      };\r\n    }\r\n  }\r\n\r\n  async addCattle(cattle: Omit<Cattle, 'id' | 'createdAt' | 'updatedAt'>): Promise<ApiResponse<Cattle>> {\r\n    try {\r\n      const response = await microservicesClient.callService('auth-service', '/auth/api/v1/cattle/store', {\r\n        method: 'POST',\r\n        body: JSON.stringify(cattle)\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to add cattle');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Failed to add cattle'\r\n      };\r\n    }\r\n  }\r\n\r\n  // IoT Device Management APIs (IoT Service - Port 8080)\r\n  async getDevices(): Promise<ApiResponse<any[]>> {\r\n    try {\r\n      const response = await microservicesClient.callService('iot-service', '/iot/api/v1/devices');\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch devices');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Failed to fetch devices'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getRFIDTags(): Promise<ApiResponse<any[]>> {\r\n    try {\r\n      const response = await microservicesClient.callService('iot-service', '/iot/api/v1/rfid-tags');\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch RFID tags');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Failed to fetch RFID tags'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Transaction APIs (Transaction Service - Port 8082)\r\n  async getTransactions(): Promise<ApiResponse<Transaction[]>> {\r\n    try {\r\n      const response = await microservicesClient.callService('transaction-service', '/api/v1/transactions');\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch transactions');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Failed to fetch transactions'\r\n      };\r\n    }\r\n  }\r\n\r\n  async addTransaction(transaction: Omit<Transaction, 'id' | 'timestamp'>): Promise<ApiResponse<Transaction>> {\r\n    try {\r\n      const response = await microservicesClient.callService('transaction-service', '/api/v1/transactions', {\r\n        method: 'POST',\r\n        body: JSON.stringify(transaction)\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to add transaction');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Failed to add transaction'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Sales & Commerce APIs (Sales Service - Port 8083)\r\n  async getSales(): Promise<ApiResponse<any[]>> {\r\n    try {\r\n      const response = await microservicesClient.callService('sales-service', '/api/commerce/sales');\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch sales');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Failed to fetch sales'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getOrders(): Promise<ApiResponse<any[]>> {\r\n    try {\r\n      const response = await microservicesClient.callService('sales-service', '/api/commerce/orders');\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch orders');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Failed to fetch orders'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Analytics & Reporting APIs (Reporting Service - Port 8084)\r\n  async getDashboardStats(): Promise<ApiResponse<DashboardStats>> {\r\n    try {\r\n      const response = await microservicesClient.callService('reporting-service', '/api/v1/dashboard');\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch dashboard stats');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Failed to fetch dashboard stats'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getAnalytics(type: string): Promise<ApiResponse<any>> {\r\n    try {\r\n      const response = await microservicesClient.callService('reporting-service', `/api/v1/analytics/${type}`);\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch analytics');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Failed to fetch analytics'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Government APIs (Government Service - Port 8085)\r\n  async getGovernmentDashboard(): Promise<ApiResponse<any>> {\r\n    try {\r\n      const response = await microservicesClient.callService('government-service', '/government/api/v1/dashboard');\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch government dashboard');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Failed to fetch government dashboard'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getSchemes(): Promise<ApiResponse<any[]>> {\r\n    try {\r\n      const response = await microservicesClient.callService('government-service', '/government/api/v1/schemes');\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to fetch schemes');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Failed to fetch schemes'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Health Check for all services\r\n  async healthCheck(): Promise<ApiResponse<Record<string, boolean>>> {\r\n    try {\r\n      const healthResults = await microservicesClient.healthCheck();\r\n      return {\r\n        success: true,\r\n        data: healthResults,\r\n        message: 'Health check completed'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Health check failed'\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const apiService = new ApiService();\r\nexport default apiService;"],"names":["AuthManager","token","authManager","ApiService","phone","password","loginResponse","errorData","responseData","userProfile","user","jwtToken","error","response","microservicesClient","data","cattle","transaction","type","apiService"],"mappings":"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"}