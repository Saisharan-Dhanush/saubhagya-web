{"version":3,"file":"QualityControl-yeYq3I-G.js","sources":["../../src/modules/purification/pages/QualityControl/QualityControl.tsx"],"sourcesContent":["/**\r\n * Quality Control Page - SAUB-FE-003\r\n * Quality testing, PESO compliance, and certification management\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport {\r\n  CheckCircle,\r\n  XCircle,\r\n  Clock,\r\n  FileText,\r\n  Award,\r\n  AlertTriangle,\r\n  FlaskConical,\r\n  Gauge,\r\n  Shield,\r\n  Search,\r\n  Download,\r\n  Upload,\r\n  Star,\r\n  TrendingUp,\r\n  Calendar\r\n} from 'lucide-react';\r\nimport { QualityTest, PurificationCycle } from '../../Purification.types';\r\nimport { QUALITY_GRADES, PESO_COMPLIANCE_LEVELS, DEFAULT_QUALITY_THRESHOLDS } from '../../Purification.config';\r\n\r\ninterface QualityFormData {\r\n  batchId: string;\r\n  cycleId: string;\r\n  testType: 'pre_treatment' | 'post_treatment' | 'final_quality';\r\n  parameters: {\r\n    ch4: number;\r\n    co2: number;\r\n    h2s: number;\r\n    moisture: number;\r\n    calificValue: number;\r\n    density: number;\r\n  };\r\n  technician: string;\r\n  labResults?: string;\r\n}\r\n\r\nexport const QualityControl: React.FC = () => {\r\n  const [qualityTests, setQualityTests] = useState<QualityTest[]>([]);\r\n  const [pendingTests, setPendingTests] = useState<QualityTest[]>([]);\r\n  const [selectedTest, setSelectedTest] = useState<QualityTest | null>(null);\r\n  const [newTestForm, setNewTestForm] = useState<QualityFormData>({\r\n    batchId: '',\r\n    cycleId: '',\r\n    testType: 'final_quality',\r\n    parameters: {\r\n      ch4: 0,\r\n      co2: 0,\r\n      h2s: 0,\r\n      moisture: 0,\r\n      calificValue: 0,\r\n      density: 0\r\n    },\r\n    technician: 'CURRENT_USER'\r\n  });\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  // Mock data\r\n  useEffect(() => {\r\n    const mockTests: QualityTest[] = [\r\n      {\r\n        id: 'test-001',\r\n        batchId: 'BATCH-2024-001',\r\n        cycleId: 'cycle-001',\r\n        testDate: new Date(),\r\n        testType: 'final_quality',\r\n        parameters: {\r\n          ch4: 95.8,\r\n          co2: 2.1,\r\n          h2s: 8.5,\r\n          moisture: 0.3,\r\n          calificValue: 9850,\r\n          density: 0.72\r\n        },\r\n        complianceStatus: 'pass',\r\n        pesoRating: 'A+',\r\n        technician: 'LAB001',\r\n        certificationNumber: 'PESO-2024-A+001',\r\n        labResults: 'All parameters within acceptable range. Premium grade quality achieved.'\r\n      },\r\n      {\r\n        id: 'test-002',\r\n        batchId: 'BATCH-2024-002',\r\n        cycleId: 'cycle-002',\r\n        testDate: new Date(Date.now() - 24 * 60 * 60 * 1000),\r\n        testType: 'final_quality',\r\n        parameters: {\r\n          ch4: 92.5,\r\n          co2: 3.2,\r\n          h2s: 15.2,\r\n          moisture: 0.6,\r\n          calificValue: 9250,\r\n          density: 0.74\r\n        },\r\n        complianceStatus: 'pass',\r\n        pesoRating: 'B+',\r\n        technician: 'LAB002',\r\n        certificationNumber: 'PESO-2024-B+002'\r\n      },\r\n      {\r\n        id: 'test-003',\r\n        batchId: 'BATCH-2024-003',\r\n        cycleId: 'cycle-003',\r\n        testDate: new Date(Date.now() - 48 * 60 * 60 * 1000),\r\n        testType: 'final_quality',\r\n        parameters: {\r\n          ch4: 88.2,\r\n          co2: 6.1,\r\n          h2s: 25.8,\r\n          moisture: 1.2,\r\n          calificValue: 8820,\r\n          density: 0.78\r\n        },\r\n        complianceStatus: 'fail',\r\n        pesoRating: 'Failed',\r\n        technician: 'LAB001',\r\n        labResults: 'CH4 content below minimum threshold. H2S levels exceed acceptable limits.'\r\n      }\r\n    ];\r\n\r\n    const mockPending: QualityTest[] = [\r\n      {\r\n        id: 'test-pending-001',\r\n        batchId: 'BATCH-2024-004',\r\n        cycleId: 'cycle-004',\r\n        testDate: new Date(),\r\n        testType: 'final_quality',\r\n        parameters: {\r\n          ch4: 0,\r\n          co2: 0,\r\n          h2s: 0,\r\n          moisture: 0,\r\n          calificValue: 0,\r\n          density: 0\r\n        },\r\n        complianceStatus: 'pending',\r\n        pesoRating: 'Pending',\r\n        technician: 'LAB001'\r\n      },\r\n      {\r\n        id: 'test-pending-002',\r\n        batchId: 'BATCH-2024-005',\r\n        cycleId: 'cycle-005',\r\n        testDate: new Date(),\r\n        testType: 'post_treatment',\r\n        parameters: {\r\n          ch4: 0,\r\n          co2: 0,\r\n          h2s: 0,\r\n          moisture: 0,\r\n          calificValue: 0,\r\n          density: 0\r\n        },\r\n        complianceStatus: 'pending',\r\n        pesoRating: 'Pending',\r\n        technician: 'LAB002'\r\n      }\r\n    ];\r\n\r\n    setQualityTests(mockTests);\r\n    setPendingTests(mockPending);\r\n  }, []);\r\n\r\n  const getComplianceLevel = (ch4Percentage: number) => {\r\n    for (const level of PESO_COMPLIANCE_LEVELS) {\r\n      if (ch4Percentage >= level.minCH4) {\r\n        return level;\r\n      }\r\n    }\r\n    return { level: 'Failed', minCH4: 0, requirements: [] };\r\n  };\r\n\r\n  const getGradeFromCH4 = (ch4: number): keyof typeof QUALITY_GRADES => {\r\n    if (ch4 >= QUALITY_GRADES.A.minCH4) return 'A';\r\n    if (ch4 >= QUALITY_GRADES.B.minCH4) return 'B';\r\n    if (ch4 >= QUALITY_GRADES.C.minCH4) return 'C';\r\n    return 'FAILED';\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'pass': return 'bg-green-100 text-green-800';\r\n      case 'fail': return 'bg-red-100 text-red-800';\r\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getPesoColor = (rating: string) => {\r\n    switch (rating) {\r\n      case 'A+': return 'bg-purple-100 text-purple-800';\r\n      case 'A': return 'bg-green-100 text-green-800';\r\n      case 'B+': return 'bg-blue-100 text-blue-800';\r\n      case 'B': return 'bg-yellow-100 text-yellow-800';\r\n      case 'Failed': return 'bg-red-100 text-red-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const handleSubmitTest = () => {\r\n    const grade = getGradeFromCH4(newTestForm.parameters.ch4);\r\n    const compliance = getComplianceLevel(newTestForm.parameters.ch4);\r\n\r\n    const newTest: QualityTest = {\r\n      id: `test-${Date.now()}`,\r\n      batchId: newTestForm.batchId,\r\n      cycleId: newTestForm.cycleId,\r\n      testDate: new Date(),\r\n      testType: newTestForm.testType,\r\n      parameters: newTestForm.parameters,\r\n      complianceStatus: newTestForm.parameters.ch4 >= DEFAULT_QUALITY_THRESHOLDS.ch4Min ? 'pass' : 'fail',\r\n      pesoRating: compliance.level,\r\n      technician: newTestForm.technician,\r\n      certificationNumber: compliance.level !== 'Failed' ? `PESO-2024-${compliance.level}-${Date.now().toString().slice(-3)}` : undefined,\r\n      labResults: newTestForm.labResults\r\n    };\r\n\r\n    setQualityTests(prev => [newTest, ...prev]);\r\n\r\n    // Remove from pending if it exists\r\n    setPendingTests(prev => prev.filter(t => t.batchId !== newTestForm.batchId));\r\n\r\n    // Reset form\r\n    setNewTestForm({\r\n      batchId: '',\r\n      cycleId: '',\r\n      testType: 'final_quality',\r\n      parameters: {\r\n        ch4: 0,\r\n        co2: 0,\r\n        h2s: 0,\r\n        moisture: 0,\r\n        calificValue: 0,\r\n        density: 0\r\n      },\r\n      technician: 'CURRENT_USER'\r\n    });\r\n  };\r\n\r\n  const filteredTests = qualityTests.filter(test =>\r\n    test.batchId.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    test.pesoRating.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    test.technician.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  const getQualityTrend = () => {\r\n    const recent = qualityTests.slice(0, 5);\r\n    const avgCH4 = recent.reduce((sum, test) => sum + test.parameters.ch4, 0) / recent.length;\r\n    const passRate = (recent.filter(test => test.complianceStatus === 'pass').length / recent.length) * 100;\r\n    return { avgCH4: avgCH4.toFixed(1), passRate: passRate.toFixed(1) };\r\n  };\r\n\r\n  const trend = getQualityTrend();\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Quality Control</h1>\r\n          <p className=\"text-gray-600 mt-1\">Testing, compliance, and certification management</p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-3\">\r\n          <Button variant=\"outline\">\r\n            <Download className=\"w-4 h-4 mr-2\" />\r\n            Export Reports\r\n          </Button>\r\n          <Button className=\"bg-green-600 hover:bg-green-700\">\r\n            <FlaskConical className=\"w-4 h-4 mr-2\" />\r\n            New Test\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Quality Overview */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-600\">Avg CH₄ Quality</p>\r\n                <p className=\"text-2xl font-bold text-green-600\">{trend.avgCH4}%</p>\r\n              </div>\r\n              <TrendingUp className=\"h-8 w-8 text-green-600\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-600\">Pass Rate</p>\r\n                <p className=\"text-2xl font-bold text-blue-600\">{trend.passRate}%</p>\r\n              </div>\r\n              <CheckCircle className=\"h-8 w-8 text-blue-600\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-600\">Pending Tests</p>\r\n                <p className=\"text-2xl font-bold text-yellow-600\">{pendingTests.length}</p>\r\n              </div>\r\n              <Clock className=\"h-8 w-8 text-yellow-600\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-600\">Certificates</p>\r\n                <p className=\"text-2xl font-bold text-purple-600\">\r\n                  {qualityTests.filter(t => t.certificationNumber).length}\r\n                </p>\r\n              </div>\r\n              <Shield className=\"h-8 w-8 text-purple-600\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      <Tabs defaultValue=\"tests\" className=\"w-full\">\r\n        <TabsList className=\"grid w-full grid-cols-4\">\r\n          <TabsTrigger value=\"tests\">Test Results ({qualityTests.length})</TabsTrigger>\r\n          <TabsTrigger value=\"pending\">Pending ({pendingTests.length})</TabsTrigger>\r\n          <TabsTrigger value=\"new\">New Test</TabsTrigger>\r\n          <TabsTrigger value=\"compliance\">PESO Compliance</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"tests\" className=\"space-y-4\">\r\n          {/* Search and Filter */}\r\n          <div className=\"flex items-center space-x-4\">\r\n            <div className=\"relative flex-1\">\r\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\r\n              <Input\r\n                placeholder=\"Search by batch ID, rating, or technician...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                className=\"pl-9\"\r\n              />\r\n            </div>\r\n            <Button variant=\"outline\">\r\n              <Calendar className=\"w-4 h-4 mr-2\" />\r\n              Filter by Date\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Test Results */}\r\n          <div className=\"space-y-4\">\r\n            {filteredTests.map((test) => (\r\n              <Card key={test.id} className=\"cursor-pointer hover:shadow-md transition-shadow\">\r\n                <CardContent className=\"p-6\">\r\n                  <div className=\"flex items-center justify-between mb-4\">\r\n                    <div>\r\n                      <h3 className=\"text-lg font-semibold\">{test.batchId}</h3>\r\n                      <p className=\"text-sm text-gray-600\">\r\n                        Tested on {test.testDate.toLocaleDateString()} by {test.technician}\r\n                      </p>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <Badge className={getStatusColor(test.complianceStatus)}>\r\n                        {test.complianceStatus}\r\n                      </Badge>\r\n                      <Badge className={getPesoColor(test.pesoRating)}>\r\n                        PESO {test.pesoRating}\r\n                      </Badge>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4 mb-4\">\r\n                    <div>\r\n                      <span className=\"text-sm text-gray-600\">CH₄</span>\r\n                      <p className=\"text-lg font-bold text-green-600\">{test.parameters.ch4}%</p>\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"text-sm text-gray-600\">CO₂</span>\r\n                      <p className=\"text-lg font-bold\">{test.parameters.co2}%</p>\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"text-sm text-gray-600\">H₂S</span>\r\n                      <p className=\"text-lg font-bold\">{test.parameters.h2s} ppm</p>\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"text-sm text-gray-600\">Moisture</span>\r\n                      <p className=\"text-lg font-bold\">{test.parameters.moisture}%</p>\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"text-sm text-gray-600\">Calorific</span>\r\n                      <p className=\"text-lg font-bold\">{test.parameters.calificValue} kJ/m³</p>\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"text-sm text-gray-600\">Density</span>\r\n                      <p className=\"text-lg font-bold\">{test.parameters.density} kg/m³</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {test.certificationNumber && (\r\n                    <div className=\"flex items-center justify-between bg-green-50 p-3 rounded-lg\">\r\n                      <div className=\"flex items-center\">\r\n                        <Shield className=\"w-5 h-5 text-green-600 mr-2\" />\r\n                        <span className=\"text-sm font-medium text-green-800\">\r\n                          Certificate: {test.certificationNumber}\r\n                        </span>\r\n                      </div>\r\n                      <Button size=\"sm\" variant=\"outline\">\r\n                        <Download className=\"w-3 h-3 mr-1\" />\r\n                        Download\r\n                      </Button>\r\n                    </div>\r\n                  )}\r\n\r\n                  {test.labResults && (\r\n                    <div className=\"mt-3\">\r\n                      <p className=\"text-sm text-gray-600 bg-gray-50 p-3 rounded\">\r\n                        <strong>Lab Results:</strong> {test.labResults}\r\n                      </p>\r\n                    </div>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"pending\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center\">\r\n                <Clock className=\"w-5 h-5 mr-2 text-yellow-600\" />\r\n                Pending Quality Tests\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Tests awaiting completion or results\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                {pendingTests.map((test) => (\r\n                  <div key={test.id} className=\"flex items-center justify-between border rounded-lg p-4\">\r\n                    <div>\r\n                      <h4 className=\"font-medium\">{test.batchId}</h4>\r\n                      <p className=\"text-sm text-gray-600\">\r\n                        {test.testType.replace('_', ' ')} - Assigned to {test.technician}\r\n                      </p>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <Badge className=\"bg-yellow-100 text-yellow-800\">\r\n                        Pending\r\n                      </Badge>\r\n                      <Button size=\"sm\" variant=\"outline\">\r\n                        Start Test\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"new\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center\">\r\n                <FlaskConical className=\"w-5 h-5 mr-2 text-blue-600\" />\r\n                New Quality Test\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Perform quality testing and compliance verification\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-6\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                {/* Test Information */}\r\n                <div className=\"space-y-4\">\r\n                  <h3 className=\"font-medium\">Test Information</h3>\r\n                  <div className=\"space-y-3\">\r\n                    <div>\r\n                      <Label htmlFor=\"batchId\">Batch ID</Label>\r\n                      <Input\r\n                        id=\"batchId\"\r\n                        value={newTestForm.batchId}\r\n                        onChange={(e) => setNewTestForm(prev => ({\r\n                          ...prev,\r\n                          batchId: e.target.value\r\n                        }))}\r\n                        placeholder=\"Enter batch ID\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"cycleId\">Cycle ID</Label>\r\n                      <Input\r\n                        id=\"cycleId\"\r\n                        value={newTestForm.cycleId}\r\n                        onChange={(e) => setNewTestForm(prev => ({\r\n                          ...prev,\r\n                          cycleId: e.target.value\r\n                        }))}\r\n                        placeholder=\"Enter cycle ID\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"testType\">Test Type</Label>\r\n                      <select\r\n                        id=\"testType\"\r\n                        className=\"w-full p-2 border border-gray-300 rounded-md\"\r\n                        value={newTestForm.testType}\r\n                        onChange={(e) => setNewTestForm(prev => ({\r\n                          ...prev,\r\n                          testType: e.target.value as any\r\n                        }))}\r\n                      >\r\n                        <option value=\"pre_treatment\">Pre-Treatment</option>\r\n                        <option value=\"post_treatment\">Post-Treatment</option>\r\n                        <option value=\"final_quality\">Final Quality</option>\r\n                      </select>\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"technician\">Technician</Label>\r\n                      <Input\r\n                        id=\"technician\"\r\n                        value={newTestForm.technician}\r\n                        onChange={(e) => setNewTestForm(prev => ({\r\n                          ...prev,\r\n                          technician: e.target.value\r\n                        }))}\r\n                        placeholder=\"Technician ID\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Test Parameters */}\r\n                <div className=\"space-y-4\">\r\n                  <h3 className=\"font-medium\">Test Parameters</h3>\r\n                  <div className=\"space-y-3\">\r\n                    <div>\r\n                      <Label htmlFor=\"ch4\">CH₄ Percentage (%)</Label>\r\n                      <Input\r\n                        id=\"ch4\"\r\n                        type=\"number\"\r\n                        step=\"0.1\"\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        value={newTestForm.parameters.ch4}\r\n                        onChange={(e) => setNewTestForm(prev => ({\r\n                          ...prev,\r\n                          parameters: {\r\n                            ...prev.parameters,\r\n                            ch4: parseFloat(e.target.value) || 0\r\n                          }\r\n                        }))}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"co2\">CO₂ Percentage (%)</Label>\r\n                      <Input\r\n                        id=\"co2\"\r\n                        type=\"number\"\r\n                        step=\"0.1\"\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        value={newTestForm.parameters.co2}\r\n                        onChange={(e) => setNewTestForm(prev => ({\r\n                          ...prev,\r\n                          parameters: {\r\n                            ...prev.parameters,\r\n                            co2: parseFloat(e.target.value) || 0\r\n                          }\r\n                        }))}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"h2s\">H₂S Level (ppm)</Label>\r\n                      <Input\r\n                        id=\"h2s\"\r\n                        type=\"number\"\r\n                        step=\"0.1\"\r\n                        min=\"0\"\r\n                        value={newTestForm.parameters.h2s}\r\n                        onChange={(e) => setNewTestForm(prev => ({\r\n                          ...prev,\r\n                          parameters: {\r\n                            ...prev.parameters,\r\n                            h2s: parseFloat(e.target.value) || 0\r\n                          }\r\n                        }))}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"moisture\">Moisture Content (%)</Label>\r\n                      <Input\r\n                        id=\"moisture\"\r\n                        type=\"number\"\r\n                        step=\"0.1\"\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        value={newTestForm.parameters.moisture}\r\n                        onChange={(e) => setNewTestForm(prev => ({\r\n                          ...prev,\r\n                          parameters: {\r\n                            ...prev.parameters,\r\n                            moisture: parseFloat(e.target.value) || 0\r\n                          }\r\n                        }))}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"calorific\">Calorific Value (kJ/m³)</Label>\r\n                      <Input\r\n                        id=\"calorific\"\r\n                        type=\"number\"\r\n                        step=\"10\"\r\n                        min=\"0\"\r\n                        value={newTestForm.parameters.calificValue}\r\n                        onChange={(e) => setNewTestForm(prev => ({\r\n                          ...prev,\r\n                          parameters: {\r\n                            ...prev.parameters,\r\n                            calificValue: parseFloat(e.target.value) || 0\r\n                          }\r\n                        }))}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"density\">Density (kg/m³)</Label>\r\n                      <Input\r\n                        id=\"density\"\r\n                        type=\"number\"\r\n                        step=\"0.01\"\r\n                        min=\"0\"\r\n                        value={newTestForm.parameters.density}\r\n                        onChange={(e) => setNewTestForm(prev => ({\r\n                          ...prev,\r\n                          parameters: {\r\n                            ...prev.parameters,\r\n                            density: parseFloat(e.target.value) || 0\r\n                          }\r\n                        }))}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Predicted Compliance */}\r\n              {newTestForm.parameters.ch4 > 0 && (\r\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\r\n                  <h4 className=\"font-medium mb-2 flex items-center\">\r\n                    <Award className=\"w-4 h-4 mr-2 text-blue-600\" />\r\n                    Predicted PESO Compliance\r\n                  </h4>\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <p className=\"text-sm text-gray-600\">Expected Grade:</p>\r\n                      <Badge className={`bg-${QUALITY_GRADES[getGradeFromCH4(newTestForm.parameters.ch4)]?.color}-100 text-${QUALITY_GRADES[getGradeFromCH4(newTestForm.parameters.ch4)]?.color}-800`}>\r\n                        Grade {getGradeFromCH4(newTestForm.parameters.ch4)}\r\n                      </Badge>\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"text-sm text-gray-600\">PESO Level:</p>\r\n                      <Badge className={getPesoColor(getComplianceLevel(newTestForm.parameters.ch4).level)}>\r\n                        {getComplianceLevel(newTestForm.parameters.ch4).level}\r\n                      </Badge>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div>\r\n                <Label htmlFor=\"labResults\">Lab Results (Optional)</Label>\r\n                <Textarea\r\n                  id=\"labResults\"\r\n                  placeholder=\"Enter detailed lab results and observations...\"\r\n                  value={newTestForm.labResults || ''}\r\n                  onChange={(e) => setNewTestForm(prev => ({\r\n                    ...prev,\r\n                    labResults: e.target.value\r\n                  }))}\r\n                  rows={3}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"flex justify-end space-x-3\">\r\n                <Button variant=\"outline\">\r\n                  Save as Draft\r\n                </Button>\r\n                <Button\r\n                  onClick={handleSubmitTest}\r\n                  disabled={!newTestForm.batchId || !newTestForm.parameters.ch4}\r\n                  className=\"bg-green-600 hover:bg-green-700\"\r\n                >\r\n                  <CheckCircle className=\"w-4 h-4 mr-2\" />\r\n                  Submit Test\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"compliance\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center\">\r\n                <Award className=\"w-5 h-5 mr-2 text-purple-600\" />\r\n                PESO Compliance Standards\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Current compliance levels and requirements\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                {PESO_COMPLIANCE_LEVELS.map((level) => (\r\n                  <div key={level.level} className=\"border rounded-lg p-4\">\r\n                    <div className=\"flex items-center justify-between mb-2\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Badge className={getPesoColor(level.level)}>\r\n                          PESO {level.level}\r\n                        </Badge>\r\n                        <Star className=\"w-4 h-4 text-yellow-500\" />\r\n                      </div>\r\n                      <span className=\"text-sm text-gray-600\">\r\n                        Min CH₄: {level.minCH4}%\r\n                      </span>\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"text-sm font-medium mb-1\">Requirements:</p>\r\n                      <ul className=\"text-sm text-gray-600 list-disc list-inside space-y-1\">\r\n                        {level.requirements.map((req, index) => (\r\n                          <li key={index}>{req}</li>\r\n                        ))}\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};"],"names":["QualityControl","qualityTests","setQualityTests","useState","pendingTests","setPendingTests","selectedTest","setSelectedTest","newTestForm","setNewTestForm","searchTerm","setSearchTerm","useEffect","mockTests","mockPending","getComplianceLevel","ch4Percentage","level","PESO_COMPLIANCE_LEVELS","getGradeFromCH4","ch4","QUALITY_GRADES","getStatusColor","status","getPesoColor","rating","handleSubmitTest","compliance","newTest","DEFAULT_QUALITY_THRESHOLDS","prev","t","filteredTests","test","trend","recent","avgCH4","sum","passRate","jsxs","jsx","Button","Download","FlaskConical","Card","CardContent","TrendingUp","CheckCircle","Clock","Shield","Tabs","TabsList","TabsTrigger","TabsContent","Search","Input","e","Calendar","Badge","CardHeader","CardTitle","CardDescription","Label","Award","Textarea","Star","req","index"],"mappings":"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"}