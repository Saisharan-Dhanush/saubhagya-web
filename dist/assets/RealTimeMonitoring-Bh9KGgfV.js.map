{"version":3,"file":"RealTimeMonitoring-Bh9KGgfV.js","sources":["../../src/modules/purification/services/mockSensor.service.ts","../../src/modules/purification/pages/RealTimeMonitoring/RealTimeMonitoring.tsx"],"sourcesContent":["/**\r\n * Mock Sensor Service for Real-time Data Simulation\r\n * SAUB-FE-003: Realistic sensor data with fluctuations\r\n */\r\n\r\nimport { PurificationMetrics, SystemAlert, PurificationUnit } from '../Purification.types';\r\nimport { SENSOR_MOCK_RANGES, DEFAULT_QUALITY_THRESHOLDS } from '../Purification.config';\r\n\r\nexport class MockSensorService {\r\n  private baseMetrics: Record<string, PurificationMetrics> = {};\r\n  private alertHistory: SystemAlert[] = [];\r\n  private isRunning = false;\r\n  private intervalId?: NodeJS.Timeout;\r\n\r\n  constructor() {\r\n    this.initializeBaseMetrics();\r\n  }\r\n\r\n  private initializeBaseMetrics() {\r\n    // Initialize 3 purification units with different base values\r\n    this.baseMetrics = {\r\n      'unit-1': {\r\n        ch4Percentage: 94.5,\r\n        pressure: 2.1,\r\n        temperature: 37.5,\r\n        flowRate: 125,\r\n        h2sLevel: 12,\r\n        co2Level: 2.5,\r\n        moisture: 0.5,\r\n        timestamp: new Date(),\r\n        unitId: 'unit-1',\r\n        status: 'operational'\r\n      },\r\n      'unit-2': {\r\n        ch4Percentage: 92.8,\r\n        pressure: 2.0,\r\n        temperature: 38.2,\r\n        flowRate: 118,\r\n        h2sLevel: 15,\r\n        co2Level: 3.1,\r\n        moisture: 0.7,\r\n        timestamp: new Date(),\r\n        unitId: 'unit-2',\r\n        status: 'operational'\r\n      },\r\n      'unit-3': {\r\n        ch4Percentage: 96.1,\r\n        pressure: 2.3,\r\n        temperature: 36.8,\r\n        flowRate: 135,\r\n        h2sLevel: 8,\r\n        co2Level: 1.9,\r\n        moisture: 0.4,\r\n        timestamp: new Date(),\r\n        unitId: 'unit-3',\r\n        status: 'operational'\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Start real-time data generation\r\n   */\r\n  startRealtimeUpdates(callback: (metrics: PurificationMetrics[], alerts: SystemAlert[]) => void): void {\r\n    if (this.isRunning) return;\r\n\r\n    this.isRunning = true;\r\n    this.intervalId = setInterval(() => {\r\n      const updatedMetrics = this.generateRealtimeMetrics();\r\n      const newAlerts = this.checkForAlerts(updatedMetrics);\r\n      callback(updatedMetrics, newAlerts);\r\n    }, 2000); // Update every 2 seconds\r\n  }\r\n\r\n  /**\r\n   * Stop real-time data generation\r\n   */\r\n  stopRealtimeUpdates(): void {\r\n    if (this.intervalId) {\r\n      clearInterval(this.intervalId);\r\n      this.intervalId = undefined;\r\n    }\r\n    this.isRunning = false;\r\n  }\r\n\r\n  /**\r\n   * Generate realistic fluctuating sensor data\r\n   */\r\n  private generateRealtimeMetrics(): PurificationMetrics[] {\r\n    const metrics: PurificationMetrics[] = [];\r\n\r\n    Object.keys(this.baseMetrics).forEach(unitId => {\r\n      const base = this.baseMetrics[unitId];\r\n      const updated: PurificationMetrics = {\r\n        ...base,\r\n        ch4Percentage: this.fluctuate(base.ch4Percentage, 1.5, SENSOR_MOCK_RANGES.ch4Percentage),\r\n        pressure: this.fluctuate(base.pressure, 0.15, SENSOR_MOCK_RANGES.pressure),\r\n        temperature: this.fluctuate(base.temperature, 1.0, SENSOR_MOCK_RANGES.temperature),\r\n        flowRate: this.fluctuate(base.flowRate, 8, SENSOR_MOCK_RANGES.flowRate),\r\n        h2sLevel: this.fluctuate(base.h2sLevel, 2, SENSOR_MOCK_RANGES.h2sLevel),\r\n        co2Level: this.fluctuate(base.co2Level, 0.3, SENSOR_MOCK_RANGES.co2Level),\r\n        moisture: this.fluctuate(base.moisture, 0.1, SENSOR_MOCK_RANGES.moisture),\r\n        timestamp: new Date(),\r\n        unitId,\r\n        status: this.determineUnitStatus(base)\r\n      };\r\n\r\n      // Update base metrics for next iteration\r\n      this.baseMetrics[unitId] = updated;\r\n      metrics.push(updated);\r\n    });\r\n\r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * Generate fluctuations within realistic ranges\r\n   */\r\n  private fluctuate(base: number, range: number, limits: { min: number; max: number }): number {\r\n    const fluctuation = (Math.random() - 0.5) * range;\r\n    const newValue = base + fluctuation;\r\n    return Math.max(limits.min, Math.min(limits.max, newValue));\r\n  }\r\n\r\n  /**\r\n   * Determine unit status based on current metrics\r\n   */\r\n  private determineUnitStatus(metrics: PurificationMetrics): 'operational' | 'maintenance' | 'offline' | 'alert' {\r\n    const thresholds = DEFAULT_QUALITY_THRESHOLDS;\r\n\r\n    // Check for critical conditions\r\n    if (metrics.ch4Percentage < thresholds.ch4Min ||\r\n        metrics.pressure > thresholds.pressureMax ||\r\n        metrics.temperature > thresholds.temperatureMax) {\r\n      return 'alert';\r\n    }\r\n\r\n    // Random maintenance simulation (5% chance)\r\n    if (Math.random() < 0.05) {\r\n      return 'maintenance';\r\n    }\r\n\r\n    return 'operational';\r\n  }\r\n\r\n  /**\r\n   * Check for alert conditions and generate alerts\r\n   */\r\n  private checkForAlerts(metrics: PurificationMetrics[]): SystemAlert[] {\r\n    const newAlerts: SystemAlert[] = [];\r\n    const thresholds = DEFAULT_QUALITY_THRESHOLDS;\r\n\r\n    metrics.forEach(metric => {\r\n      // CH4 Percentage alerts\r\n      if (metric.ch4Percentage < thresholds.ch4Min) {\r\n        newAlerts.push(this.createAlert(\r\n          'critical',\r\n          metric.unitId,\r\n          `CH₄ purity dropped to ${metric.ch4Percentage.toFixed(1)}% (Min: ${thresholds.ch4Min}%)`,\r\n          ['Adjust purification parameters', 'Check filter status', 'Review feed quality']\r\n        ));\r\n      }\r\n\r\n      // Pressure alerts\r\n      if (metric.pressure > thresholds.pressureMax) {\r\n        newAlerts.push(this.createAlert(\r\n          'warning',\r\n          metric.unitId,\r\n          `High pressure detected: ${metric.pressure.toFixed(1)} bar (Max: ${thresholds.pressureMax} bar)`,\r\n          ['Check pressure relief valves', 'Monitor flow rates', 'Inspect compressor']\r\n        ));\r\n      }\r\n\r\n      // Temperature alerts\r\n      if (metric.temperature > thresholds.temperatureMax) {\r\n        newAlerts.push(this.createAlert(\r\n          'warning',\r\n          metric.unitId,\r\n          `Temperature elevated: ${metric.temperature.toFixed(1)}°C (Max: ${thresholds.temperatureMax}°C)`,\r\n          ['Check cooling system', 'Verify ambient conditions', 'Monitor process load']\r\n        ));\r\n      }\r\n\r\n      // H2S alerts\r\n      if (metric.h2sLevel > thresholds.h2sMax) {\r\n        newAlerts.push(this.createAlert(\r\n          'error',\r\n          metric.unitId,\r\n          `H₂S levels high: ${metric.h2sLevel.toFixed(1)} ppm (Max: ${thresholds.h2sMax} ppm)`,\r\n          ['Check desulfurization unit', 'Replace activated carbon', 'Review feed composition']\r\n        ));\r\n      }\r\n    });\r\n\r\n    // Add random operational alerts (10% chance)\r\n    if (Math.random() < 0.1) {\r\n      newAlerts.push(this.createAlert(\r\n        'info',\r\n        'system',\r\n        'Automated maintenance cycle completed successfully',\r\n        ['Review maintenance report', 'Update maintenance logs']\r\n      ));\r\n    }\r\n\r\n    // Store in alert history\r\n    this.alertHistory.push(...newAlerts);\r\n\r\n    // Keep only last 50 alerts\r\n    if (this.alertHistory.length > 50) {\r\n      this.alertHistory = this.alertHistory.slice(-50);\r\n    }\r\n\r\n    return newAlerts;\r\n  }\r\n\r\n  /**\r\n   * Create a standardized alert object\r\n   */\r\n  private createAlert(\r\n    type: 'warning' | 'error' | 'info' | 'critical',\r\n    source: string,\r\n    message: string,\r\n    actions: string[]\r\n  ): SystemAlert {\r\n    const priority = type === 'critical' ? 'critical' :\r\n                    type === 'error' ? 'high' :\r\n                    type === 'warning' ? 'medium' : 'low';\r\n\r\n    return {\r\n      id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n      type,\r\n      source,\r\n      message,\r\n      timestamp: new Date(),\r\n      acknowledged: false,\r\n      priority,\r\n      actions\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get current metrics snapshot\r\n   */\r\n  getCurrentMetrics(): PurificationMetrics[] {\r\n    return Object.values(this.baseMetrics);\r\n  }\r\n\r\n  /**\r\n   * Get alert history\r\n   */\r\n  getAlertHistory(): SystemAlert[] {\r\n    return [...this.alertHistory].reverse(); // Most recent first\r\n  }\r\n\r\n  /**\r\n   * Acknowledge an alert\r\n   */\r\n  acknowledgeAlert(alertId: string, userId: string): boolean {\r\n    const alert = this.alertHistory.find(a => a.id === alertId);\r\n    if (alert && !alert.acknowledged) {\r\n      alert.acknowledged = true;\r\n      alert.acknowledgedBy = userId;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Simulate unit shutdown for maintenance\r\n   */\r\n  simulateUnitMaintenance(unitId: string, durationMinutes: number = 30): void {\r\n    if (this.baseMetrics[unitId]) {\r\n      this.baseMetrics[unitId].status = 'maintenance';\r\n\r\n      // Automatically restore after duration\r\n      setTimeout(() => {\r\n        if (this.baseMetrics[unitId]) {\r\n          this.baseMetrics[unitId].status = 'operational';\r\n        }\r\n      }, durationMinutes * 60 * 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get units with current status\r\n   */\r\n  getUnitsStatus(): PurificationUnit[] {\r\n    return Object.values(this.baseMetrics).map(metric => ({\r\n      id: metric.unitId,\r\n      name: `Purification Unit ${metric.unitId.split('-')[1]}`,\r\n      type: metric.unitId === 'unit-1' ? 'primary' : metric.unitId === 'unit-2' ? 'secondary' : 'polishing',\r\n      capacity: metric.unitId === 'unit-1' ? 150 : metric.unitId === 'unit-2' ? 120 : 100,\r\n      currentLoad: metric.flowRate,\r\n      efficiency: (metric.ch4Percentage / 100) * 100,\r\n      status: metric.status,\r\n      lastMaintenance: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),\r\n      nextMaintenance: new Date(Date.now() + Math.random() * 15 * 24 * 60 * 60 * 1000),\r\n      sensors: [metric],\r\n      alerts: this.alertHistory.filter(alert => alert.source === metric.unitId),\r\n      location: `Section ${metric.unitId.split('-')[1]}`,\r\n      installationDate: new Date('2023-01-15'),\r\n      manufacturer: 'ShuddhiTech Industries',\r\n      model: `ST-${metric.unitId.toUpperCase()}-2024`\r\n    }));\r\n  }\r\n}","/**\r\n * Real-time Monitoring Page - SAUB-FE-003\r\n * Live sensor monitoring with alerts and system controls\r\n */\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport {\r\n  Activity,\r\n  Gauge,\r\n  Thermometer,\r\n  Wind,\r\n  Droplets,\r\n  FlaskConical,\r\n  Zap,\r\n  AlertTriangle,\r\n  CheckCircle,\r\n  XCircle,\r\n  Play,\r\n  Pause,\r\n  Square,\r\n  Settings,\r\n  Bell,\r\n  Eye,\r\n  EyeOff,\r\n  Maximize,\r\n  Minimize,\r\n  Download,\r\n  RefreshCw,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  Minus,\r\n  BarChart3\r\n} from 'lucide-react';\r\nimport { PurificationMetrics, SystemAlert, PurificationUnit } from '../../Purification.types';\r\nimport { MockSensorService } from '../../services/mockSensor.service';\r\nimport { DEFAULT_QUALITY_THRESHOLDS, REFRESH_INTERVALS } from '../../Purification.config';\r\n\r\ninterface SensorDisplay {\r\n  id: string;\r\n  name: string;\r\n  unit: string;\r\n  icon: React.ReactNode;\r\n  color: string;\r\n  min: number;\r\n  max: number;\r\n  optimal: number;\r\n  critical?: {\r\n    min?: number;\r\n    max?: number;\r\n  };\r\n}\r\n\r\nexport const RealTimeMonitoring: React.FC = () => {\r\n  const [isMonitoring, setIsMonitoring] = useState(false);\r\n  const [currentMetrics, setCurrentMetrics] = useState<PurificationMetrics[]>([]);\r\n  const [activeAlerts, setActiveAlerts] = useState<SystemAlert[]>([]);\r\n  const [selectedUnit, setSelectedUnit] = useState<string>('unit-1');\r\n  const [alertsEnabled, setAlertsEnabled] = useState(true);\r\n  const [autoRefresh, setAutoRefresh] = useState(true);\r\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\r\n  const [historicalData, setHistoricalData] = useState<{[key: string]: PurificationMetrics[]}>({});\r\n\r\n  const mockSensorService = useRef(new MockSensorService());\r\n\r\n  const sensorDisplays: SensorDisplay[] = [\r\n    {\r\n      id: 'ch4Percentage',\r\n      name: 'CH₄ Purity',\r\n      unit: '%',\r\n      icon: <Gauge className=\"w-6 h-6\" />,\r\n      color: 'text-green-600',\r\n      min: 85,\r\n      max: 98,\r\n      optimal: 95,\r\n      critical: { min: 90 }\r\n    },\r\n    {\r\n      id: 'pressure',\r\n      name: 'Pressure',\r\n      unit: 'bar',\r\n      icon: <Wind className=\"w-6 h-6\" />,\r\n      color: 'text-blue-600',\r\n      min: 1.5,\r\n      max: 3.0,\r\n      optimal: 2.1,\r\n      critical: { max: 2.5 }\r\n    },\r\n    {\r\n      id: 'temperature',\r\n      name: 'Temperature',\r\n      unit: '°C',\r\n      icon: <Thermometer className=\"w-6 h-6\" />,\r\n      color: 'text-orange-600',\r\n      min: 25,\r\n      max: 50,\r\n      optimal: 37,\r\n      critical: { max: 45 }\r\n    },\r\n    {\r\n      id: 'flowRate',\r\n      name: 'Flow Rate',\r\n      unit: 'm³/h',\r\n      icon: <Activity className=\"w-6 h-6\" />,\r\n      color: 'text-purple-600',\r\n      min: 50,\r\n      max: 200,\r\n      optimal: 125\r\n    },\r\n    {\r\n      id: 'h2sLevel',\r\n      name: 'H₂S Level',\r\n      unit: 'ppm',\r\n      icon: <FlaskConical className=\"w-6 h-6\" />,\r\n      color: 'text-red-600',\r\n      min: 0,\r\n      max: 30,\r\n      optimal: 10,\r\n      critical: { max: 20 }\r\n    },\r\n    {\r\n      id: 'co2Level',\r\n      name: 'CO₂ Level',\r\n      unit: '%',\r\n      icon: <Zap className=\"w-6 h-6\" />,\r\n      color: 'text-yellow-600',\r\n      min: 0,\r\n      max: 8,\r\n      optimal: 2.5,\r\n      critical: { max: 5 }\r\n    },\r\n    {\r\n      id: 'moisture',\r\n      name: 'Moisture',\r\n      unit: '%',\r\n      icon: <Droplets className=\"w-6 h-6\" />,\r\n      color: 'text-cyan-600',\r\n      min: 0,\r\n      max: 2,\r\n      optimal: 0.5,\r\n      critical: { max: 1 }\r\n    }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (isMonitoring && autoRefresh) {\r\n      mockSensorService.current.startRealtimeUpdates((metrics, alerts) => {\r\n        setCurrentMetrics(metrics);\r\n\r\n        if (alertsEnabled) {\r\n          setActiveAlerts(prev => [...prev, ...alerts].slice(-10)); // Keep last 10 alerts\r\n        }\r\n\r\n        // Store historical data\r\n        setHistoricalData(prev => {\r\n          const updated = { ...prev };\r\n          metrics.forEach(metric => {\r\n            if (!updated[metric.unitId]) {\r\n              updated[metric.unitId] = [];\r\n            }\r\n            updated[metric.unitId].push(metric);\r\n            // Keep last 50 data points per unit\r\n            if (updated[metric.unitId].length > 50) {\r\n              updated[metric.unitId] = updated[metric.unitId].slice(-50);\r\n            }\r\n          });\r\n          return updated;\r\n        });\r\n      });\r\n    } else {\r\n      mockSensorService.current.stopRealtimeUpdates();\r\n    }\r\n\r\n    return () => {\r\n      mockSensorService.current.stopRealtimeUpdates();\r\n    };\r\n  }, [isMonitoring, autoRefresh, alertsEnabled]);\r\n\r\n  const handleStartMonitoring = () => {\r\n    setIsMonitoring(true);\r\n    // Initialize with current metrics\r\n    const initialMetrics = mockSensorService.current.getCurrentMetrics();\r\n    setCurrentMetrics(initialMetrics);\r\n  };\r\n\r\n  const handleStopMonitoring = () => {\r\n    setIsMonitoring(false);\r\n    mockSensorService.current.stopRealtimeUpdates();\r\n  };\r\n\r\n  const handleAcknowledgeAlert = (alertId: string) => {\r\n    mockSensorService.current.acknowledgeAlert(alertId, 'CURRENT_USER');\r\n    setActiveAlerts(prev => prev.filter(alert => alert.id !== alertId));\r\n  };\r\n\r\n  const getSelectedUnitMetrics = (): PurificationMetrics | null => {\r\n    return currentMetrics.find(m => m.unitId === selectedUnit) || null;\r\n  };\r\n\r\n  const getSensorValue = (metrics: PurificationMetrics | null, sensorId: string): number => {\r\n    if (!metrics) return 0;\r\n    return (metrics as any)[sensorId] || 0;\r\n  };\r\n\r\n  const getSensorStatus = (value: number, sensor: SensorDisplay): 'normal' | 'warning' | 'critical' => {\r\n    if (sensor.critical) {\r\n      if ((sensor.critical.min && value < sensor.critical.min) ||\r\n          (sensor.critical.max && value > sensor.critical.max)) {\r\n        return 'critical';\r\n      }\r\n    }\r\n\r\n    const tolerance = (sensor.max - sensor.min) * 0.1; // 10% tolerance\r\n    if (value < sensor.min + tolerance || value > sensor.max - tolerance) {\r\n      return 'warning';\r\n    }\r\n\r\n    return 'normal';\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'critical': return 'text-red-600 bg-red-100';\r\n      case 'warning': return 'text-yellow-600 bg-yellow-100';\r\n      case 'normal': return 'text-green-600 bg-green-100';\r\n      default: return 'text-gray-600 bg-gray-100';\r\n    }\r\n  };\r\n\r\n  const getAlertColor = (type: string) => {\r\n    switch (type) {\r\n      case 'critical': return 'bg-red-100 text-red-800 border-red-200';\r\n      case 'error': return 'bg-red-100 text-red-800 border-red-200';\r\n      case 'warning': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\r\n      case 'info': return 'bg-blue-100 text-blue-800 border-blue-200';\r\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const getTrend = (unitId: string, sensorId: string): 'up' | 'down' | 'stable' => {\r\n    const history = historicalData[unitId];\r\n    if (!history || history.length < 2) return 'stable';\r\n\r\n    const recent = history.slice(-2);\r\n    const current = (recent[1] as any)[sensorId];\r\n    const previous = (recent[0] as any)[sensorId];\r\n\r\n    const diff = current - previous;\r\n    if (Math.abs(diff) < 0.1) return 'stable';\r\n    return diff > 0 ? 'up' : 'down';\r\n  };\r\n\r\n  const getTrendIcon = (trend: 'up' | 'down' | 'stable') => {\r\n    switch (trend) {\r\n      case 'up': return <TrendingUp className=\"w-4 h-4 text-green-600\" />;\r\n      case 'down': return <TrendingDown className=\"w-4 h-4 text-red-600\" />;\r\n      case 'stable': return <Minus className=\"w-4 h-4 text-gray-600\" />;\r\n    }\r\n  };\r\n\r\n  const selectedMetrics = getSelectedUnitMetrics();\r\n  const unitsStatus = mockSensorService.current.getUnitsStatus();\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Real-time Monitoring</h1>\r\n          <p className=\"text-gray-600 mt-1\">Live sensor data and system monitoring</p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-3\">\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={() => setAlertsEnabled(!alertsEnabled)}\r\n            className={alertsEnabled ? 'text-green-600' : 'text-gray-600'}\r\n          >\r\n            <Bell className=\"w-4 h-4 mr-2\" />\r\n            {alertsEnabled ? 'Alerts On' : 'Alerts Off'}\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={() => setAutoRefresh(!autoRefresh)}\r\n            className={autoRefresh ? 'text-blue-600' : 'text-gray-600'}\r\n          >\r\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\r\n            {autoRefresh ? 'Auto Refresh' : 'Manual'}\r\n          </Button>\r\n          {!isMonitoring ? (\r\n            <Button onClick={handleStartMonitoring} className=\"bg-green-600 hover:bg-green-700\">\r\n              <Play className=\"w-4 h-4 mr-2\" />\r\n              Start Monitoring\r\n            </Button>\r\n          ) : (\r\n            <Button onClick={handleStopMonitoring} variant=\"outline\" className=\"text-red-600\">\r\n              <Square className=\"w-4 h-4 mr-2\" />\r\n              Stop Monitoring\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* System Status Overview */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        {unitsStatus.map((unit) => {\r\n          const metrics = currentMetrics.find(m => m.unitId === unit.id);\r\n          const isSelected = selectedUnit === unit.id;\r\n\r\n          return (\r\n            <Card\r\n              key={unit.id}\r\n              className={`cursor-pointer transition-all ${isSelected ? 'ring-2 ring-blue-500 bg-blue-50' : 'hover:shadow-md'}`}\r\n              onClick={() => setSelectedUnit(unit.id)}\r\n            >\r\n              <CardContent className=\"p-4\">\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <h3 className=\"font-medium\">{unit.name}</h3>\r\n                  <Badge className={getStatusColor(unit.status)}>\r\n                    {unit.status}\r\n                  </Badge>\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-center justify-between text-sm\">\r\n                    <span className=\"text-gray-600\">CH₄:</span>\r\n                    <span className=\"font-medium\">{metrics?.ch4Percentage?.toFixed(1) || '--'}%</span>\r\n                  </div>\r\n                  <div className=\"flex items-center justify-between text-sm\">\r\n                    <span className=\"text-gray-600\">Load:</span>\r\n                    <span className=\"font-medium\">{unit.currentLoad}/{unit.capacity} m³/h</span>\r\n                  </div>\r\n                  <Progress value={(unit.currentLoad / unit.capacity) * 100} className=\"h-2\" />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* Active Alerts */}\r\n      {activeAlerts.length > 0 && (\r\n        <Alert className=\"border-yellow-200 bg-yellow-50\">\r\n          <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\r\n          <AlertDescription className=\"text-yellow-800\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <span>\r\n                <strong>{activeAlerts.length} Active Alert{activeAlerts.length > 1 ? 's' : ''}</strong>\r\n                {activeAlerts.length > 0 && ` - Latest: ${activeAlerts[activeAlerts.length - 1].message}`}\r\n              </span>\r\n              <Button size=\"sm\" variant=\"outline\" className=\"text-yellow-800 border-yellow-300\">\r\n                View All\r\n              </Button>\r\n            </div>\r\n          </AlertDescription>\r\n        </Alert>\r\n      )}\r\n\r\n      <Tabs defaultValue=\"sensors\" className=\"w-full\">\r\n        <TabsList className=\"grid w-full grid-cols-4\">\r\n          <TabsTrigger value=\"sensors\">Live Sensors</TabsTrigger>\r\n          <TabsTrigger value=\"alerts\">Alerts ({activeAlerts.length})</TabsTrigger>\r\n          <TabsTrigger value=\"controls\">System Controls</TabsTrigger>\r\n          <TabsTrigger value=\"trends\">Historical Trends</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"sensors\" className=\"space-y-6\">\r\n          {/* Monitoring Status */}\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-4\">\r\n              <div className={`flex items-center space-x-2 ${isMonitoring ? 'text-green-600' : 'text-gray-600'}`}>\r\n                <div className={`w-3 h-3 rounded-full ${isMonitoring ? 'bg-green-600 animate-pulse' : 'bg-gray-400'}`}></div>\r\n                <span className=\"font-medium\">\r\n                  {isMonitoring ? 'Monitoring Active' : 'Monitoring Stopped'}\r\n                </span>\r\n              </div>\r\n              {isMonitoring && (\r\n                <span className=\"text-sm text-gray-600\">\r\n                  Last update: {new Date().toLocaleTimeString()}\r\n                </span>\r\n              )}\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"outline\"\r\n                onClick={() => setViewMode(viewMode === 'grid' ? 'list' : 'grid')}\r\n              >\r\n                {viewMode === 'grid' ? <Minimize className=\"w-4 h-4\" /> : <Maximize className=\"w-4 h-4\" />}\r\n                {viewMode === 'grid' ? 'List View' : 'Grid View'}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Selected Unit Details */}\r\n          {selectedMetrics && (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center justify-between\">\r\n                  <span>Unit {selectedUnit.split('-')[1]} - Live Sensor Data</span>\r\n                  <Badge className={getStatusColor(selectedMetrics.status)}>\r\n                    {selectedMetrics.status}\r\n                  </Badge>\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  Real-time readings from all sensors\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className={`grid ${viewMode === 'grid' ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4' : 'grid-cols-1'} gap-4`}>\r\n                  {sensorDisplays.map((sensor) => {\r\n                    const value = getSensorValue(selectedMetrics, sensor.id);\r\n                    const status = getSensorStatus(value, sensor);\r\n                    const trend = getTrend(selectedUnit, sensor.id);\r\n                    const percentage = ((value - sensor.min) / (sensor.max - sensor.min)) * 100;\r\n\r\n                    return (\r\n                      <Card key={sensor.id} className={viewMode === 'list' ? 'p-2' : ''}>\r\n                        <CardContent className={`${viewMode === 'list' ? 'p-4' : 'p-6'}`}>\r\n                          <div className=\"flex items-center justify-between mb-3\">\r\n                            <div className=\"flex items-center space-x-2\">\r\n                              <div className={sensor.color}>\r\n                                {sensor.icon}\r\n                              </div>\r\n                              <span className=\"font-medium text-sm\">{sensor.name}</span>\r\n                            </div>\r\n                            <div className=\"flex items-center space-x-1\">\r\n                              {getTrendIcon(trend)}\r\n                              <Badge className={`text-xs ${getStatusColor(status)}`}>\r\n                                {status}\r\n                              </Badge>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"space-y-2\">\r\n                            <div className=\"flex items-center justify-between\">\r\n                              <span className=\"text-2xl font-bold\">{value.toFixed(1)}</span>\r\n                              <span className=\"text-sm text-gray-600\">{sensor.unit}</span>\r\n                            </div>\r\n\r\n                            <Progress\r\n                              value={Math.max(0, Math.min(100, percentage))}\r\n                              className=\"h-2\"\r\n                            />\r\n\r\n                            <div className=\"flex justify-between text-xs text-gray-500\">\r\n                              <span>{sensor.min}</span>\r\n                              <span className=\"font-medium\">Target: {sensor.optimal}</span>\r\n                              <span>{sensor.max}</span>\r\n                            </div>\r\n                          </div>\r\n                        </CardContent>\r\n                      </Card>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n\r\n          {/* All Units Summary */}\r\n          {!selectedMetrics && (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Select a Unit to View Detailed Sensor Data</CardTitle>\r\n                <CardDescription>\r\n                  Click on any unit above to see real-time sensor readings\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-center py-8\">\r\n                  <Eye className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n                  <p className=\"text-gray-500\">Choose a purification unit to monitor its sensors</p>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"alerts\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center justify-between\">\r\n                <span>System Alerts</span>\r\n                <Button size=\"sm\" variant=\"outline\">\r\n                  <Download className=\"w-4 h-4 mr-2\" />\r\n                  Export\r\n                </Button>\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Active and recent system alerts\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {activeAlerts.length === 0 ? (\r\n                <div className=\"text-center py-8\">\r\n                  <CheckCircle className=\"w-12 h-12 text-green-400 mx-auto mb-4\" />\r\n                  <p className=\"text-gray-500\">No active alerts - system running normally</p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"space-y-3\">\r\n                  {activeAlerts.slice().reverse().map((alert) => (\r\n                    <div key={alert.id} className={`border rounded-lg p-4 ${getAlertColor(alert.type)}`}>\r\n                      <div className=\"flex items-center justify-between mb-2\">\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          <AlertTriangle className=\"w-5 h-5\" />\r\n                          <span className=\"font-medium\">{alert.type.toUpperCase()}</span>\r\n                          <Badge variant=\"outline\">\r\n                            {alert.source}\r\n                          </Badge>\r\n                        </div>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          <span className=\"text-xs\">\r\n                            {alert.timestamp.toLocaleTimeString()}\r\n                          </span>\r\n                          <Button\r\n                            size=\"sm\"\r\n                            variant=\"outline\"\r\n                            onClick={() => handleAcknowledgeAlert(alert.id)}\r\n                          >\r\n                            Acknowledge\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                      <p className=\"text-sm mb-2\">{alert.message}</p>\r\n                      {alert.actions.length > 0 && (\r\n                        <div className=\"text-xs\">\r\n                          <strong>Recommended actions:</strong>\r\n                          <ul className=\"list-disc list-inside mt-1\">\r\n                            {alert.actions.map((action, index) => (\r\n                              <li key={index}>{action}</li>\r\n                            ))}\r\n                          </ul>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"controls\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center\">\r\n                  <Settings className=\"w-5 h-5 mr-2 text-blue-600\" />\r\n                  Monitoring Controls\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <Label htmlFor=\"autoRefresh\">Auto Refresh</Label>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={() => setAutoRefresh(!autoRefresh)}\r\n                    className={autoRefresh ? 'bg-green-100' : ''}\r\n                  >\r\n                    {autoRefresh ? 'Enabled' : 'Disabled'}\r\n                  </Button>\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <Label htmlFor=\"alertsEnabled\">Alert Notifications</Label>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={() => setAlertsEnabled(!alertsEnabled)}\r\n                    className={alertsEnabled ? 'bg-green-100' : ''}\r\n                  >\r\n                    {alertsEnabled ? 'Enabled' : 'Disabled'}\r\n                  </Button>\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <Label>Refresh Interval</Label>\r\n                  <span className=\"text-sm font-medium\">2 seconds</span>\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <Label>Data Retention</Label>\r\n                  <span className=\"text-sm font-medium\">50 readings per unit</span>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center\">\r\n                  <Zap className=\"w-5 h-5 mr-2 text-yellow-600\" />\r\n                  System Actions\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <Button variant=\"outline\" className=\"w-full justify-start\">\r\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\r\n                  Reset All Sensors\r\n                </Button>\r\n                <Button variant=\"outline\" className=\"w-full justify-start\">\r\n                  <Settings className=\"w-4 h-4 mr-2\" />\r\n                  Calibrate Sensors\r\n                </Button>\r\n                <Button variant=\"outline\" className=\"w-full justify-start\">\r\n                  <Download className=\"w-4 h-4 mr-2\" />\r\n                  Export Data\r\n                </Button>\r\n                <Button variant=\"outline\" className=\"w-full justify-start text-red-600\">\r\n                  <AlertTriangle className=\"w-4 h-4 mr-2\" />\r\n                  Emergency Stop\r\n                </Button>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Unit Controls */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Unit-Specific Controls</CardTitle>\r\n              <CardDescription>\r\n                Control individual purification units\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                {unitsStatus.map((unit) => (\r\n                  <div key={unit.id} className=\"border rounded-lg p-4\">\r\n                    <div className=\"flex items-center justify-between mb-3\">\r\n                      <h4 className=\"font-medium\">{unit.name}</h4>\r\n                      <Badge className={getStatusColor(unit.status)}>\r\n                        {unit.status}\r\n                      </Badge>\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Button size=\"sm\" variant=\"outline\" className=\"w-full\">\r\n                        Start Maintenance\r\n                      </Button>\r\n                      <Button size=\"sm\" variant=\"outline\" className=\"w-full\">\r\n                        Reset Alarms\r\n                      </Button>\r\n                      <Button size=\"sm\" variant=\"outline\" className=\"w-full\">\r\n                        View Logs\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"trends\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center\">\r\n                <BarChart3 className=\"w-5 h-5 mr-2 text-purple-600\" />\r\n                Historical Trends\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Sensor data trends over time\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {Object.keys(historicalData).length === 0 ? (\r\n                <div className=\"text-center py-8\">\r\n                  <TrendingUp className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n                  <p className=\"text-gray-500\">Start monitoring to see historical trends</p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"space-y-6\">\r\n                  {Object.entries(historicalData).map(([unitId, data]) => {\r\n                    if (data.length < 2) return null;\r\n\r\n                    const latest = data[data.length - 1];\r\n                    const previous = data[data.length - 2];\r\n\r\n                    return (\r\n                      <div key={unitId} className=\"border rounded-lg p-4\">\r\n                        <h4 className=\"font-medium mb-3\">Unit {unitId.split('-')[1]} Trends</h4>\r\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n                          {sensorDisplays.slice(0, 4).map((sensor) => {\r\n                            const currentVal = (latest as any)[sensor.id];\r\n                            const prevVal = (previous as any)[sensor.id];\r\n                            const change = currentVal - prevVal;\r\n                            const changePercent = (change / prevVal) * 100;\r\n\r\n                            return (\r\n                              <div key={sensor.id} className=\"text-center\">\r\n                                <div className=\"flex items-center justify-center space-x-1 mb-1\">\r\n                                  <span className=\"text-sm font-medium\">{sensor.name}</span>\r\n                                  {Math.abs(changePercent) > 1 && getTrendIcon(change > 0 ? 'up' : 'down')}\r\n                                </div>\r\n                                <div className=\"text-lg font-bold\">{currentVal.toFixed(1)}</div>\r\n                                <div className={`text-xs ${Math.abs(changePercent) > 1 ? (change > 0 ? 'text-green-600' : 'text-red-600') : 'text-gray-500'}`}>\r\n                                  {change > 0 ? '+' : ''}{change.toFixed(1)} ({changePercent.toFixed(1)}%)\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          })}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};"],"names":["MockSensorService","callback","updatedMetrics","newAlerts","metrics","unitId","base","updated","SENSOR_MOCK_RANGES","range","limits","fluctuation","newValue","thresholds","DEFAULT_QUALITY_THRESHOLDS","metric","type","source","message","actions","priority","alertId","userId","alert","a","durationMinutes","RealTimeMonitoring","isMonitoring","setIsMonitoring","useState","currentMetrics","setCurrentMetrics","activeAlerts","setActiveAlerts","selectedUnit","setSelectedUnit","alertsEnabled","setAlertsEnabled","autoRefresh","setAutoRefresh","viewMode","setViewMode","historicalData","setHistoricalData","mockSensorService","useRef","sensorDisplays","jsx","Gauge","Wind","Thermometer","Activity","FlaskConical","Zap","Droplets","useEffect","alerts","prev","handleStartMonitoring","initialMetrics","handleStopMonitoring","handleAcknowledgeAlert","getSelectedUnitMetrics","m","getSensorValue","sensorId","getSensorStatus","value","sensor","tolerance","getStatusColor","status","getAlertColor","getTrend","history","recent","current","previous","diff","getTrendIcon","trend","TrendingUp","TrendingDown","Minus","selectedMetrics","unitsStatus","jsxs","Button","Bell","RefreshCw","Square","Play","unit","isSelected","Card","CardContent","Badge","Progress","Alert","AlertTriangle","AlertDescription","Tabs","TabsList","TabsTrigger","TabsContent","Minimize","Maximize","CardHeader","CardTitle","CardDescription","percentage","Eye","Download","CheckCircle","action","index","Settings","Label","BarChart3","data","latest","currentVal","prevVal","change","changePercent"],"mappings":"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"}